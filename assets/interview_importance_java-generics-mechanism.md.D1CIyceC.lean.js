import{_ as e,B as p,o as r,c as E,j as i,a,G as n,a8 as h,w as k}from"./chunks/framework.D0fTRY1a.js";const m=JSON.parse('{"title":"Java泛型机制","description":"","frontmatter":{},"headers":[],"relativePath":"interview/importance/java-generics-mechanism.md","filePath":"interview/importance/java-generics-mechanism.md","lastUpdated":null}'),d={name:"interview/importance/java-generics-mechanism.md"};function g(y,s,c,b,o,u){const t=p("ArticleMetadata"),l=p("font");return r(),E("div",null,[s[2]||(s[2]=i("h1",{id:"java泛型机制",tabindex:"-1"},[a("Java泛型机制 "),i("a",{class:"header-anchor",href:"#java泛型机制","aria-label":'Permalink to "Java泛型机制"'},"​")],-1)),n(t),s[3]||(s[3]=h("",35)),i("p",null,[s[1]||(s[1]=a("在此之前，我们所使用的泛型都是应用于整个类上。泛型同样可以在类中包含参数化的方法，而方法所在的类可以是泛型类，也可以不是泛型类。也就是说，")),n(l,{size:"5"},{default:k(()=>[n(l,{color:"blue"},{default:k(()=>s[0]||(s[0]=[a("是否拥有泛型方法，与其所在的类是不是泛型没有关系。")])),_:1})]),_:1})]),s[4]||(s[4]=h("",29))])}const A=e(d,[["render",g]]);export{m as __pageData,A as default};
