import{_ as i,o as a,c as n,a7 as t}from"./chunks/framework.CU6B6cvq.js";const E=JSON.parse('{"title":"微服务整合Gateway网关","description":"","frontmatter":{"title":"微服务整合Gateway网关","order":5,"category":["微服务"],"tag":["微服务"],"pageview":false,"date":"2023-09-23T00:00:00.000Z","comment":false,"breadcrumb":false},"headers":[],"relativePath":"systemdesign/springcloud/micro-service-integration-gateway.md","filePath":"systemdesign/springcloud/micro-service-integration-gateway.md"}'),l={name:"systemdesign/springcloud/micro-service-integration-gateway.md"};function h(p,s,e,k,r,d){return a(),n("div",null,s[0]||(s[0]=[t(`<h1 id="微服务整合gateway网关" tabindex="-1">微服务整合Gateway网关 <a class="header-anchor" href="#微服务整合gateway网关" aria-label="Permalink to &quot;微服务整合Gateway网关&quot;">​</a></h1><blockquote><p>大家好，我是Leo🫣🫣🫣，之前微服务专题我也断更了一段时间，因为忙着做其他事情，这不最近没有那么忙了，打算在今年之前把这个专栏更新完毕，也会一直记录我的微服务学习的相关博客，今天我们主要学习一下微服务整合Gateway网关， 话不多说，让我们开始吧😎😎😎。</p></blockquote><h2 id="_1-什么是springcloud-gateway" tabindex="-1">1. 什么是SpringCloud Gateway <a class="header-anchor" href="#_1-什么是springcloud-gateway" aria-label="Permalink to &quot;1.  什么是SpringCloud Gateway&quot;">​</a></h2><p>关作为流量的入口，常用的功能包括路由转发，权限校验，限流等。 SpringCloud Gateway 是 Spring Cloud 官方推出的第二代网关框架，定位于取代 Netlix Zuul。相比 Zuul 来说，Spring Cloud Gateway 提供更优秀的性能，更强大的有功能。 Spring Cloud Gateway 由 WebFlux + Netty + Reactor 实现的响应式的 API 网关。它不能在传统的servlet 容器中工作，也不能构建成 war 包。 Spring Cloud Gateway 旨在为微服务架构提供一种简单且有效的 API 路由的管理方式，并基于 Filter 的方式提供网关的基本功能，例如说安全认证、监控、限流等等。</p><p>其它网关组件： 在 SpringCloud 微服务体系中，有个很重要的组件就是网关，在 1.x 版本中都是采用的 Zuul 网关；但在 2.x 版本中，zuul 的升级一直跳票，SpringCloud 最后自 己研发了一个网关替代 Zuul，那就是 SpringCloud Gateway 网上很多地方都说 Zuul 是阻塞的，Gateway 是非阻塞的，这么说是不严谨的，准确的讲 zuul 1.x 是阻塞的，而在 2.x 的版本中，Zuul 也是基于 Netty，也是非阻塞的，如果一定要说性能，其实没多大差距。</p><p>SpringCloud Gateway 功能特征</p><ol><li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0 进行构建。</li><li>动态路由：能够匹配任何请求属性。</li><li>支持路径重写。</li><li>集成 Spring Cloud 服务发现功能 (Nacos、 Eruka)。</li><li>可集成流控降级功能 (Sentinel、 Hystrix)。</li><li>可以对路由指定易于编写的 Predicate (断言) 和 Filter (过滤器)。</li></ol><h2 id="_2-为什么需要springcloud-gateway" tabindex="-1">2. 为什么需要SpringCloud Gateway <a class="header-anchor" href="#_2-为什么需要springcloud-gateway" aria-label="Permalink to &quot;2. 为什么需要SpringCloud Gateway&quot;">​</a></h2><p>大家都都知道在微服务架构中，一个系统会被拆分为很多个微服务。那么作为客户端要如何去调用这么多的微服务呢？如果没有网关的存在，我们只能在客户端记录每个微服务的地址，然后分别去用。</p><p><strong>这样架构会存在很多问题：</strong></p><ol><li>每个业务都会需要<code>鉴权</code>、<code>限流</code>、<code>权限校验</code>、<code>跨域</code> 等逻辑，如果每个业务都各自为战，自己造轮子实现一遍，会很蛋疼，完全可以抽出来，放到一个统一的地方去做。</li><li>如果业务量比较简单的话， 这种方式前期不会有什么问题，但随着业务越来越复杂，比如淘宝、亚马逊，打开一个页面可能会涉及到数百个微服务协同工作，如果每一个微服务都分配一个域名的话，一方面客户端代码会很难维护，涉及到数百个域名，另一方面是连接数的瓶颈，想象一 下你打开一个 APP，通过抓包发现涉及到了数百个远程调用，这在移动端下会显得非常低效。</li><li>后期如果需要对微服务进行重构的话， 也会变的非常麻烦，需要客户端配合你一起进行改造，比如商品服务，随着业务变的越来越复杂，后期需要进行拆分成多个微服务，这个时候对外提供的服务也需要拆分成多个，同时需要客户端配合你进行改造，非常难受。</li></ol><p>其实上面的问题都可以通过网关来解决。</p><p><strong>网关的核心功能特性：</strong></p><p>注重稳定性:</p><ul><li>全局性流控</li><li>日志统计</li><li>防止 SQL 注入</li><li>防止 Web 攻击</li><li>屏蔽工具扫描</li><li>黑白 IP 名单</li><li>证书 / 加解密处理</li><li>提供更好的服务</li></ul><p>服务级别流控</p><ul><li>服务降级与熔断</li><li>路由与负载均衡、灰度策略</li><li>服务过滤、聚合与发现</li><li>权限验证与用户等级策略</li><li>业务规则与参数校验</li><li>多级缓存策略</li></ul><p><strong>架构图</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172249766.png" alt="image-20230917224934628"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><h2 id="_3-springcloud-gateway快速开始" tabindex="-1">3. SpringCloud Gateway快速开始 <a class="header-anchor" href="#_3-springcloud-gateway快速开始" aria-label="Permalink to &quot;3. SpringCloud Gateway快速开始&quot;">​</a></h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><p><strong>当然这些都是基于我们之前所搭建的用户订单服务器进行搭建与测试</strong></p><ol><li>创建SpringBoot工程 <strong>Gateway</strong>，引入网关依赖</li><li>编写启动类</li><li>编写基础配置和路由规则</li><li>启动网关服务进行测试</li></ol><h3 id="_3-1-创建gateway微服务" tabindex="-1">3.1 创建gateway微服务 <a class="header-anchor" href="#_3-1-创建gateway微服务" aria-label="Permalink to &quot;3.1 创建gateway微服务&quot;">​</a></h3><p><strong>创建微服务</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172132278.png" alt="image-20230917213202981"></p><p><strong>引入依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--网关--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-starter-gateway&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--nacos服务发现依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_3-2-编写启动类" tabindex="-1">3.2 编写启动类 <a class="header-anchor" href="#_3-2-编写启动类" aria-label="Permalink to &quot;3.2 编写启动类&quot;">​</a></h3><div class="language-JAVA vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.cisyam.gateway;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.ConfigurableApplicationContext;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.core.env.Environment;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.client.RestTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> gaoizman</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GateWayApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ConfigurableApplicationContext context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GateWayApplication.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Environment environment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Environment.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;访问链接：http://localhost:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> environment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server.port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(♥◠‿◠)ﾉﾞ  项目启动成功   ლ(´ڡ\`ლ)ﾞ  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; .-------.       ____     __        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; |  _ _   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /  /    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; | ( &#39; )  |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  _. /  &#39;       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; |(_ o _) /        _( )_ .&#39;         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; | (_,_).&#39; __  ___(_ o _)&#39;          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; |  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  |  ||   |(_,_)&#39;         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; |  | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`&#39;   /|   \`-&#39;  /           </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; |  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    /  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      /           </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot; &#39;&#39;-&#39;   \`&#39;-&#39;    \`-..-&#39;              &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-3-编写基础配置类以及路由规则" tabindex="-1">3.3 编写基础配置类以及路由规则 <a class="header-anchor" href="#_3-3-编写基础配置类以及路由规则" aria-label="Permalink to &quot;3.3 编写基础配置类以及路由规则&quot;">​</a></h3><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10010</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 网关端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gateway</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nacos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      server-addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">localhost:8848</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # nacos地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 网关路由配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">userservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由id，自定义，只要唯一即可</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lb://userservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          predicates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Path=/user/**</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这个是按照路径匹配，只要以/user/开头就符合要求</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 过滤器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AddRequestHeader=Truth, Leo is freaking awesome!</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 添加请求头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">orderservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由id，自定义，只要唯一即可</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lb://orderservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          predicates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Path=/order/**</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这个是按照路径匹配，只要以/user/开头就符合要求</span></span></code></pre></div><p>我们将符合 <code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><h3 id="_3-4-测试gateway" tabindex="-1">3.4 测试Gateway <a class="header-anchor" href="#_3-4-测试gateway" aria-label="Permalink to &quot;3.4 测试Gateway&quot;">​</a></h3><p>我们重启网关，访问 <a href="http://localhost:10010/user/1" target="_blank" rel="noreferrer">http://localhost:10010/user/1</a> 时，符合 <code>/user/**</code> 规则，请求转发到uri：<a href="http://userservice/user/1%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86%E7%BB%93%E6%9E%9C%EF%BC%9A" target="_blank" rel="noreferrer">http://userservice/user/1，得到了结果：</a></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172135665.png" alt="image-20210714211908341"></p><h3 id="_3-5-关于网关路由流程图" tabindex="-1">3.5 关于网关路由流程图 <a class="header-anchor" href="#_3-5-关于网关路由流程图" aria-label="Permalink to &quot;3.5 关于网关路由流程图&quot;">​</a></h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172207368.png" alt="image-20230917220739241"></p><p><strong>总结：</strong></p><p>网关搭建步骤：</p><ol><li><p>创建项目，引入nacos服务发现和gateway依赖</p></li><li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p></li></ol><p>路由配置包括：</p><ol><li><p>**路由id：**路由的唯一标示</p></li><li><p><strong>路由目标（uri）：</strong> 路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p></li><li><p>**路由断言（predicates）： **判断路由的规则，</p></li><li><p><strong>路由过滤器（filters）：</strong> 对请求或响应做处理</p></li></ol><h2 id="_4-springcloud-gateway进阶" tabindex="-1">4. SpringCloud Gateway进阶 <a class="header-anchor" href="#_4-springcloud-gateway进阶" aria-label="Permalink to &quot;4. SpringCloud Gateway进阶&quot;">​</a></h2><h3 id="_4-1-断言工厂" tabindex="-1">4.1 断言工厂 <a class="header-anchor" href="#_4-1-断言工厂" aria-label="Permalink to &quot;4.1 断言工厂&quot;">​</a></h3><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path=/user/**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table tabindex="0"><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握<strong>Path</strong>这种路由工程就可以了。</p><h3 id="_4-2-过虑器工厂" tabindex="-1">4.2 过虑器工厂 <a class="header-anchor" href="#_4-2-过虑器工厂" aria-label="Permalink to &quot;4.2 过虑器工厂&quot;">​</a></h3><p>过滤器 有 20 多个 实现 类， 包括 头部 过滤器、 路径 类 过滤器、 Hystrix 过滤器 和 变更 请求 URL 的 过滤器， 还有 参数 和 状态 码 等 其他 类型 的 过滤器。</p><p>内置的过滤器工厂有22个实现类，包括 头部过滤器、路径过滤器、Hystrix 过滤器 、请求URL 变更过滤器，还有参数和状态码等其他类型的过滤器。根据过滤器工厂的用途来划分，可以分为以下几种：Header、Parameter、Path、Body、Status、Session、Redirect、Retry、RateLimiter和Hystrix</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172230801.png" alt="img"></p><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172259998.png" alt="image-20230917225932875"></p><h4 id="_1-路由过滤器的种类" tabindex="-1">1. 路由过滤器的种类 <a class="header-anchor" href="#_1-路由过滤器的种类" aria-label="Permalink to &quot;1. 路由过滤器的种类&quot;">​</a></h4><p>Spring提供了37种不同的路由过滤器工厂。例如：</p><table tabindex="0"><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172232940.png" alt="image-20230917223234870"></p><h4 id="_2-请求头过滤器" tabindex="-1">2. 请求头过滤器 <a class="header-anchor" href="#_2-请求头过滤器" aria-label="Permalink to &quot;2. 请求头过滤器&quot;">​</a></h4><p>下面我们以AddRequestHeader 为例来讲解。</p><blockquote><p>给所有进入userservice的请求添加一个请求头：Truth=给请求头加过滤器测试！</p></blockquote><p>只需要修改<strong>gateway</strong> 服务的 application.yml文件，添加路由过滤即可：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172212843.png" alt="image-20230917221240645"></p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 网关路由配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">userservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由id，自定义，只要唯一即可</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lb://userservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          predicates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Path=/user/**</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这个是按照路径匹配，只要以/user/开头就符合要求</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 过滤器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AddRequestHeader=Truth, 给请求头加过滤器测试！</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 添加请求头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">orderservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由id，自定义，只要唯一即可</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lb://orderservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          predicates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Path=/order/**</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这个是按照路径匹配，只要以/user/开头就符合要求</span></span></code></pre></div><p><strong>当前过滤器写在userservice路由下，因此仅仅对访问 userservice的请求有效。</strong></p><h4 id="_3-默认过滤器" tabindex="-1">3. 默认过滤器 <a class="header-anchor" href="#_3-默认过滤器" aria-label="Permalink to &quot;3. 默认过滤器&quot;">​</a></h4><p>如果要对所有的路由都生效，则可以将过滤器工厂写到<strong>default</strong>下。格式如下：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">userservice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lb://userservice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        predicates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Path=/user/**</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      default-filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认过滤项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AddRequestHeader=Truth, 给请求头加过滤器测试！</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 添加请求头</span></span></code></pre></div><h4 id="_4-总结" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h4><p>过滤器的作用是什么？</p><ol><li>对路由的请求或响应做加工处理，比如<strong>添加请求头</strong>。</li><li>配置在路由下的过滤器只对当前路由的<strong>请求生效</strong>。</li></ol><h3 id="_4-4-全局过滤器" tabindex="-1">4.4 全局过滤器 <a class="header-anchor" href="#_4-4-全局过滤器" aria-label="Permalink to &quot;4.4 全局过滤器&quot;">​</a></h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172232940.png" alt="image-20230917223234870"></p><p>上一节学习的过滤器，网关提供了37种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><h4 id="_1-全局过滤器作用" tabindex="-1">1. 全局过滤器作用 <a class="header-anchor" href="#_1-全局过滤器作用" aria-label="Permalink to &quot;1. 全局过滤器作用&quot;">​</a></h4><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与 <code>GatewayFilter</code> 的作用一样。区别在于 <code>GatewayFilter</code> 通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GlobalFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *  处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> exchange</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 请求上下文，里面可以获取Request、Response等信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> chain</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 用来把请求委托给下一个过滤器 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> {@code Mono&lt;Void&gt;} 返回标示当前过滤器业务结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServerWebExchange </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GatewayFilterChain </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在<strong>filter</strong>中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h4 id="过滤器执行顺序" tabindex="-1">过滤器执行顺序 <a class="header-anchor" href="#过滤器执行顺序" aria-label="Permalink to &quot;过滤器执行顺序&quot;">​</a></h4><p>请求进入网关会碰到三类过滤器：当前路由的过<code>滤器</code>、<code>DefaultFilter</code>、<code>GlobalFilter</code> 。</p><p>请求路由后，会将当前路由过滤器和 <code>DefaultFilter</code>、<code>GlobalFilter</code>，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309172259998.png" alt="image-20230917225932875"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code> 方法是先加载<code>defaultFilters</code>，然后再加载某个route的filters，然后合并后根据order排序，组织过滤器链</p><h3 id="_4-5-跨域问题" tabindex="-1">4.5 跨域问题 <a class="header-anchor" href="#_4-5-跨域问题" aria-label="Permalink to &quot;4.5 跨域问题&quot;">​</a></h3><h4 id="_1-什么是跨域请求" tabindex="-1">1. 什么是跨域请求 <a class="header-anchor" href="#_1-什么是跨域请求" aria-label="Permalink to &quot;1. 什么是跨域请求&quot;">​</a></h4><p>跨域请求指的就是：当前发起请求的域与该请求指向的资源所在的域不同时的请求。这种不同主要涵盖了协议、域名、端口号的差异。</p><p>而当跨域请求发生时，假如我们没有对其进行处理，浏览器将依据同源策略的规定拒绝该请求，禁止加载来自不同源的资源或执行相关操作。</p><h4 id="_2-整的跨域请求流程" tabindex="-1">2. 整的跨域请求流程 <a class="header-anchor" href="#_2-整的跨域请求流程" aria-label="Permalink to &quot;2. 整的跨域请求流程&quot;">​</a></h4><p>通常情况下，在跨域请求当中，涉及到两个请求过程，第一次是预检请求（<code>OPTIONS请求</code>），用于验证服务器是否允许跨域请求，服务器会在响应中携带头部信息给浏览器，浏览器再发送第二次实际的跨域请求，然后服务器接收请求后再进行处理，并在响应中包含必要的头部信息。</p><p><strong>注意</strong>：在一些特殊情况下，如果服务器已经配置允许来自所有源的请求（使用通配符 *），或者服务器与客户端位于同一源（同源请求），那么只会发送一次实际请求而不需要预检请求。但这通常不是最佳的安全做法，因为它可能会导致安全漏洞。</p><h4 id="_3-同源策略" tabindex="-1">3. 同源策略 <a class="header-anchor" href="#_3-同源策略" aria-label="Permalink to &quot;3. 同源策略&quot;">​</a></h4><p>上述对跨域请求的介绍当中出现了一个名词：<strong>同源策略</strong>，那么什么是同源策略呢？</p><p>同源策略（<code>Same-Origin Policy</code>）是浏览器的一种安全机制，它限制了脚本在不同源之间进行自由的数据交互，</p><p>同源策略的<strong>主要目的</strong>是保护用户的隐私和安全，防止恶意网站通过脚本获取用户的敏感信息或执行恶意操作。如果没有同源策略的限制，恶意网站就可以通过脚本来读取用户在其他网站上的数据，或者在用户不知情的情况下执行一些危险的操作。</p><p>同源指的就是 <strong>协议</strong>（如HTTP或HTTPS）、<strong>域名</strong>（包括子域名）和 <strong>端口号</strong>完全相同的两个URL。</p><h4 id="_4-springboot中如何解决跨域问题" tabindex="-1">4. SpringBoot中如何解决跨域问题 <a class="header-anchor" href="#_4-springboot中如何解决跨域问题" aria-label="Permalink to &quot;4. SpringBoot中如何解决跨域问题&quot;">​</a></h4><h5 id="_1-spring提供的简化跨域配置的机制" tabindex="-1">1. Spring提供的简化跨域配置的机制 <a class="header-anchor" href="#_1-spring提供的简化跨域配置的机制" aria-label="Permalink to &quot;1. Spring提供的简化跨域配置的机制&quot;">​</a></h5><p>Spring框架提供了一些简化跨域配置的方法，主要是通过Spring Web模块（通常与Spring Boot结合使用）来实现的。</p><ol><li><p>使用 <strong>@CrossOrigin</strong> 注解：在 <code>Controller</code> 层，你可以为特定的处理方法或整个控制器类添加**@CrossOrigin** 注解，以声明允许的跨域请求。</p></li><li><p>使用全局配置：如果要在整个应用程序中配置跨域规则，可以使用全局配置。通过CorsRegistry来配置全局跨域规则.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addCorsMappings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CorsRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置路径匹配模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedOrigins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:9000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许的来源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DELETE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许的HTTP方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Accept&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许的HTTP头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持用户凭证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缓存时长</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>在上面的示例中，我们创建了一个名为<code>WebConfig</code>的配置类，使用<strong>addCorsMappings</strong>方法定义了CORS规则，允许来自<code>https://localhost:9000</code>的跨域请求，并指定了允许的HTTP方法、请求头和缓存时间。</p><h5 id="_2-微服务中通过在网关配置" tabindex="-1">2. 微服务中通过在网关配置 <a class="header-anchor" href="#_2-微服务中通过在网关配置" aria-label="Permalink to &quot;2. 微服务中通过在网关配置&quot;">​</a></h5><p>在<strong>gateway</strong>服务的application.yml文件中，添加下面的配置：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">globalcors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局的跨域处理</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        add-to-simple-url-handler-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 解决options请求被拦截问题</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        corsConfigurations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;[/**]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            allowedOrigins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 允许哪些网站的跨域请求 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:9000&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 允许的跨域ajax的请求方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DELETE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PUT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPTIONS&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            allowedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 允许在请求中携带的头信息</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            allowCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 是否允许携带cookie</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            maxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这次跨域检测的有效期</span></span></code></pre></div><h5 id="_3-通过nginx反向代理来解决跨域问题" tabindex="-1">3. 通过Nginx反向代理来解决跨域问题 <a class="header-anchor" href="#_3-通过nginx反向代理来解决跨域问题" aria-label="Permalink to &quot;3. 通过Nginx反向代理来解决跨域问题&quot;">​</a></h5><p>我们可以在配置文件当中进行配置 :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置 HTTP 服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 配置反向代理，将 localhost:8080 的请求转发到 localhost:8081</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $host;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Real-IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $remote_addr;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 添加跨域头信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://localhost:8080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;GET, POST, OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Access-Control-Allow-Headers&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 处理 OPTIONS 请求的头信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($request_method = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Access-Control-Allow-Credentials&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;true&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Access-Control-Max-Age&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1728000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Content-Type&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;text/plain charset=UTF-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Content-Length&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 204</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_4-总结-1" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结-1" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h4><ul><li>跨域的必要性和重要性：跨域的必要性和重要性在于保护用户数据和隐私、维护互联网生态系统的安全和稳定。</li><li>合适的跨域解决方案：<strong>根据具体的需求和环境</strong>，选择合适的解决方案来确保跨域请求的安全性、兼容性、功能性、性能和维护性。</li><li>分布式系统当中的跨域：跨域在分布式系统当中尤为常见，分布式系统通常由多个独立部署的服务或模块组成，这些服务可能运行在不同的 <strong>域名、主机</strong>或<strong>端口</strong>上。当一个服务需要与另一个服务或模块进行通信时，就会涉及到跨域请求。</li></ul>`,120)]))}const o=i(l,[["render",h]]);export{E as __pageData,o as default};
