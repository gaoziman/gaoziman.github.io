import{_ as n,B as e,o as t,c as l,j as i,a as r,G as o,a8 as p}from"./chunks/framework.D0fTRY1a.js";const y=JSON.parse('{"title":"SpringSecurity6 | 默认登录页","description":"","frontmatter":{},"headers":[],"relativePath":"framework/springsecurity/default-login-page.md","filePath":"framework/springsecurity/default-login-page.md","lastUpdated":null}'),c={name:"framework/springsecurity/default-login-page.md"};function h(g,a,d,u,k,m){const s=e("ArticleMetadata");return t(),l("div",null,[a[0]||(a[0]=i("h1",{id:"springsecurity6-默认登录页",tabindex:"-1"},[r("SpringSecurity6 | 默认登录页 "),i("a",{class:"header-anchor",href:"#springsecurity6-默认登录页","aria-label":'Permalink to "SpringSecurity6 | 默认登录页"'},"​")],-1)),o(s),a[1]||(a[1]=p(`<h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>大家好，我是Leo哥🫣🫣🫣，前面我们学习了有关SpringSecurity在SpringBoot项目中是如何给我进行自动的添加鉴权功能，简单复习了一下SpirngBoot的自动配置。接下来我们就接着学习SpringSecurity相关知识点。这一节我们将要学习SpringSecurity中默认的登录页面是如何实现的。好了，话不多说让我们开始吧😎😎😎。</p><h2 id="_2-涉及过滤器" tabindex="-1">2.涉及过滤器 <a class="header-anchor" href="#_2-涉及过滤器" aria-label="Permalink to &quot;2.涉及过滤器&quot;">​</a></h2><p>在在<a href="https://gaoziman.blog.csdn.net/article/details/134282404?spm=1001.2014.3001.5502" target="_blank" rel="noreferrer">SpringSecurity6核心过滤器</a>中，我们有介绍到当SpringBoot项目启动后，SpringSecurity一共有15个过滤器默认自启动。那么我们请求发出到渲染出默认登录页面这个过程又设计到几个过滤器呢，接下来我们简单介绍一下。</p><ul><li><p>首先是<code>UsernamePasswordAuthenticationFilter</code>，他主要根据用户名和密码进行认证的。</p></li><li><p>然后就是<code>DefaultLoginPageGeneratingFilter</code>，它主要负责默认登录页面的生成。</p></li><li><p><code>ExceptionTranslationFilter</code>，他主要负责SpringSecurity处理认证过程中发生的异常。</p></li><li><p>最后就是<code>AuthorizationFilter</code>，主要是处理用户的访问认证处理，只有当访问认证通过了，该请求才会被通过。</p></li></ul><h2 id="_3-登录页面渲染流程" tabindex="-1">3.登录页面渲染流程 <a class="header-anchor" href="#_3-登录页面渲染流程" aria-label="Permalink to &quot;3.登录页面渲染流程&quot;">​</a></h2><p>我们要想知道一个请求是如何被SpringSecurity中一步一步拦截，并生成默认的登录页面的话，我们就必须知道当我们的请求经过SpringSecurity中如何被过滤器拦截，就要知道他的细节。下面我通过一张图来带大家了解，一个请求发出后，在SpringSecurity内部是如何运作的。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192201055.png" alt="image-20231119220128982" loading="lazy"></p><p><strong>页面渲染力流程：</strong></p><ol><li>访问地址 <a href="http://localhost:8500/hello,%E4%BC%9A%E7%BB%8F%E8%BF%87%E8%BF%87%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4%E6%8B%A6%E6%88%AA%E3%80%82" target="_blank" rel="noreferrer">http://localhost:8500/hello,会经过过个过滤器进行过滤拦截。</a></li><li>当请求到达AuthorizationFilter时，系统会检查是否该请求是否进行了认证，如何未认证，则会将该请求拦截下来，并抛出<code>AccessDenieException</code>异常。</li><li>抛出的<code>AccessDenieException</code>异常会被ExceptionTranslationFilter破获并启动身份验证，在这个Filter中会调用LoginUrlAuthenticationEntrypoint的commence()方法，并要求重定向到/login页面中去。</li><li>重定向到/login页面，也就是客户端发送的/loginq请求。</li><li>/login请求会被过滤器<code>DefaultLoginPageGeneratingFilter</code>进行拦截，并在过滤器中返回默认的登录页面。</li></ol><h2 id="_4-重定向登录页" tabindex="-1">4.重定向登录页 <a class="header-anchor" href="#_4-重定向登录页" aria-label="Permalink to &quot;4.重定向登录页&quot;">​</a></h2><p>那么上面流程是这么说的，流程图是这么画的，如何验证我们的猜想呢，下面就跟着Leo哥视角，去写一个测试，通过源码追踪的方式去验证我们的猜想。</p><p>首先添加一个访问测试接口：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello SpringSecurity6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>未登录时访问接口，会 <strong>重定向到登录页</strong>，流程图如下说示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192227103.png" alt="image-20231119222738018" loading="lazy"></p><p>流程图说明：</p><ol><li>一个用户向其未被授权的资源（<code>/test</code>）发出一个未经认证的请求。</li><li>请求进入<code>SecurityFilterChain</code>开始执行过滤器，在<code>AuthorizationFilter</code>中校验不通过，抛出一个<code>AccessDeniedException</code>。</li><li><code>ExceptionTranslationFilter </code>捕获到异常，调用<code>LoginUrlAuthenticationEntryPoint </code>重定向到<code>/login</code>。</li><li>重定向的<code>/login</code>发起请求进入过滤器</li><li><code>/login</code>会被<code>DefaultLoginPageGeneratingFilter</code>处理，直接响应写出默认登录页。</li></ol><h3 id="_4-1-抛出-accessdeniedexception" tabindex="-1">4.1 抛出 AccessDeniedException <a class="header-anchor" href="#_4-1-抛出-accessdeniedexception" aria-label="Permalink to &quot;4.1 抛出 AccessDeniedException&quot;">​</a></h3><p>访问上述接口地址，在<a href="https://gaoziman.blog.csdn.net/article/details/134282404?spm=1001.2014.3001.5502" target="_blank" rel="noreferrer">SpringSecurity6核心过滤器</a>中，有介绍请求最开始是到达<code>FilterChainProxy</code>，由它来调用<code>SecurityFilterChain</code>中的过滤器，<code>/test</code>是没有经过认证的，依次通过下述所有过滤器。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192229694.png" alt="image-20231119222914647" loading="lazy"></p><p>在通过最后一个过滤器<code>AuthorizationFilter</code>中，对当前请求做最后的权限校验，如果没有权限，则会抛出<code>AccessDeniedException</code>：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192229882.png" alt="image-20231119222957823" loading="lazy"></p><p>首先<code>AuthorizationFilter</code>会取出当前用户认证信息，因为当前请求未认证，用户为<code>AnonymousAuthenticationFilter</code>创建的<strong>匿名用户</strong>：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192231149.png" alt="image-20231119223120045" loading="lazy"></p><p>接着使用<code>AuthorizationManager</code>授权管理器对当前认证信息检查，因为是<strong>匿名用户</strong>，所以判定当前请求无权访问，抛出<code>AccessDeniedException</code>：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192233539.png" alt="image-20231119223320474" loading="lazy"></p><h3 id="_4-2-异常处理" tabindex="-1">4.2 异常处理 <a class="header-anchor" href="#_4-2-异常处理" aria-label="Permalink to &quot;4.2 异常处理&quot;">​</a></h3><p>抛出的<code>AccessDeniedException</code>异常会被<code>ExceptionTranslationFilter</code>捕获：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192234057.png" alt="image-20231119223453928" loading="lazy"></p><p><code>ExceptionTranslationFilter</code>根据异常类型进行相应处理：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192235571.png" alt="image-20231119223543539" loading="lazy"></p><p>接着调用<code>handleAccessDeniedException</code>：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192236930.png" alt="image-20231119223648856" loading="lazy"></p><p>接着调用<code>sendStartAuthentication</code>缓存请求，并调用<code>AuthenticationEntryPoint</code>生成认证入口：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192236173.png" alt="image-20231119223625130" loading="lazy"></p><h3 id="_4-3-重定向" tabindex="-1">4.3 重定向 <a class="header-anchor" href="#_4-3-重定向" aria-label="Permalink to &quot;4.3 重定向&quot;">​</a></h3><p>接着调用到<code>LoginUrlAuthenticationEntryPoint</code>的commence进行<strong>重定向</strong>或者<strong>转发</strong>：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192238245.png" alt="image-20231119223801209" loading="lazy"></p><h3 id="_4-4-生成默认登录页面" tabindex="-1">4.4 生成默认登录页面 <a class="header-anchor" href="#_4-4-生成默认登录页面" aria-label="Permalink to &quot;4.4 生成默认登录页面&quot;">​</a></h3><p>在经过<code>DefaultLoginPageGeneratingFilter</code>时，进行<strong>默认登录页</strong>处理，在该过滤器中，维护了很多参数：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 登录页地址，默认/login</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String loginPageUrl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 登出成功页地址，默认/login?logout</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String logoutSuccessUrl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 登录错误页地址，默认/login?error</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String failureUrl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否开启表单登录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formLoginEnabled;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否开启oauth2登录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oauth2LoginEnabled;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否开启saml2登录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> saml2LoginEnabled;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 认证请求地址，默认/login</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String authenticationUrl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 用户名参数，默认username</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String usernameParameter;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 密码参数，默认password</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String passwordParameter;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>重定向的<code>GET /login</code>请求则会进入<strong>生成登录页</strong>逻辑，调用<code>response</code>直接输出一个页面，并<code>return</code>不再执行后续操作：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192239728.png" alt="image-20231119223919693" loading="lazy"></p><p>那么这个LoginPageHtml是啥呢，其实大家到这里已经可以猜到了，没错就是我们的默认登录页面的HTML，被拼接成了String字符串，最后通过response写出。</p><p>我们可以点进去generateLoginPageHtml()这个方法中去查看。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192241389.png" alt="image-20231119224144289" loading="lazy"></p><p>没错，就是我们熟悉的HTML，然后通过StringBuilder拼接然后返回。</p><p>最后，我们默认的登录页面就在前端浏览器进行了展示。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202311192243976.png" alt="image-20231119224305949" loading="lazy"></p><h2 id="_5-参考文献" tabindex="-1">5.参考文献 <a class="header-anchor" href="#_5-参考文献" aria-label="Permalink to &quot;5.参考文献&quot;">​</a></h2><ul><li><a href="https://springdoc.cn/spring-security/servlet/architecture.html" target="_blank" rel="noreferrer">https://springdoc.cn/spring-security/servlet/architecture.html</a></li><li><a href="http://springboot.fun/" target="_blank" rel="noreferrer">http://springboot.fun/</a></li></ul><h2 id="_6-总结" tabindex="-1">6.总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6.总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>`,55))])}const b=n(c,[["render",h]]);export{y as __pageData,b as default};
