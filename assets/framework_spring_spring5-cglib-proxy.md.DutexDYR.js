import{_ as i,o as a,c as n,a7 as l}from"./chunks/framework.CU6B6cvq.js";const d=JSON.parse('{"title":"SpringCGlib动态代理","description":"","frontmatter":{"title":"SpringCGlib动态代理","order":9,"category":["spring🍃"],"tag":["spring🍃"],"pageview":false,"date":"2023-11-05T23:47:15.000Z","comment":false,"breadcrumb":false},"headers":[],"relativePath":"framework/spring/spring5-cglib-proxy.md","filePath":"framework/spring/spring5-cglib-proxy.md"}'),h={name:"framework/spring/spring5-cglib-proxy.md"};function t(p,s,e,k,r,E){return a(),n("div",null,s[0]||(s[0]=[l(`<h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>前面文章我们学习了关于Spring的IOC与AOP相关知识点，在此之前，我们主要学习Spring的一些核心概念，<strong>IOC</strong>和<strong>AOP</strong>等等。我们之前学习了简单了解了AOP如何借助动态字节码技术来构建动态代理类。实现动态代理的方式不止一种。本次系列文章主要介绍两种：<strong>JDK动态代理</strong>和<strong>CGlib动态代理</strong>，主要主要介绍CGlib动态代理。好了，话不多说，让我们开始吧😎😎😎。</p><h2 id="_2-jdk动态代理有什么缺陷" tabindex="-1">2.JDK动态代理有什么缺陷 <a class="header-anchor" href="#_2-jdk动态代理有什么缺陷" aria-label="Permalink to &quot;2.JDK动态代理有什么缺陷&quot;">​</a></h2><p>在上一章关于JDK动态代理的讨论中，我们确实注意到了其一个明显的限制：<strong>原始类和代理类都必须实现同一个接口，代理类方法添加额外功能并调用原始类方法</strong>。这种方式就像房屋中介：他们为租客提供服务，而租客可能并不知道背后的真正房东。但这种模式确实存在局限性，特别是当我们的系统设计中没有采用接口，或者原始类并没有实现任何接口而是直接写具体方法实现时。</p><p>那么，面对这种情况，我们怎么办？我们如何实现动态代理而不受到<strong>必须实现接口</strong>这一限制的约束？为了解决这个问题，Cglib(<strong>Code Generation Library</strong>) 应运而生。Cglib为我们提供了一种不基于接口的代理实现方式，它可以直接代理类。相对于JDK的代理方式，Cglib是基于继承父类(原始类)的，它会动态生成一个子类来覆盖原始类的方法，从而实现代理功能。这样既可以保证二者方法一致，这样既可以保证在代理类中提供新的实现，同时又调用了原始方法</p><p>这种方法提供了更大的灵活性，特别是对于那些没有接口的类。在接下来的章节中，我们将深入探讨Cglib，了解它是如何提供这种强大功能的，以及它与JDK动态代理的区别和优缺点</p><h2 id="_3-什么是cglib动态代理" tabindex="-1">3.什么是CGlib动态代理 <a class="header-anchor" href="#_3-什么是cglib动态代理" aria-label="Permalink to &quot;3.什么是CGlib动态代理&quot;">​</a></h2><p>CGLib**(Code Generation Library)**是一个强大的、高性能的代码生成库，它是基于Java字节码操作的开源框架。CGLib动态代理是CGLib框架提供的一种动态代理技术。与Java标准库中的动态代理（基于接口）不同，CGLib动态代理可以代理普通的类，而不仅限于接口。</p><p>使用CGLib动态代理，我们可以在运行时创建一个目标类的子类，并在子类中拦截并增强目标类的方法调用。这种方式不需要目标类实现任何接口，而是通过继承来实现代理。</p><p>CGLib动态代理的原理是通过生成目标类的子类来实现代理。在子类中，代理类重写了目标类的方法，并在方法中添加了额外的逻辑，例如前置处理、后置处理等。当我们调用代理对象的方法时，实际上是调用了子类中重写的方法，从而实现了对目标类方法的拦截和增强。</p><p>相比于基于接口的动态代理，CGLib动态代理的性能更高，但也因为需要生成子类，所以在代理类的创建过程中会消耗一定的时间和内存。因此，如果目标类已经实现了接口，且性能要求不高，那么使用基于接口的动态代理可能更合适；而如果目标类没有实现接口，或者对性能有较高要求，那么可以选择CGLib动态代理。</p><p><strong>需要注意的是，CGLib动态代理只能代理非final的类，因为无法生成final类的子类。另外，由于CGLib动态代理是直接操作字节码的，所以在一些特殊的环境中可能会受到限制。</strong></p><h2 id="_4-spring5整合cglib动态代理开发步骤" tabindex="-1">4.Spring5整合CGlib动态代理开发步骤 <a class="header-anchor" href="#_4-spring5整合cglib动态代理开发步骤" aria-label="Permalink to &quot;4.Spring5整合CGlib动态代理开发步骤&quot;">​</a></h2><p>Spring框架提供了丰富的AOP功能，可以帮助我们更好地管理代码。在Spring中，我们可以使用CGlib动态代理来实现AOP功能。下面是一个简单的示例，演示如何使用Spring5整合CGlib动态代理。</p><ol><li>原始类的设计：首先，我们要设计并定义一个原始类。特别要注意的是，这里的原始类无需实现任何接口。这为那些基于纯类设计而非接口设计的应用提供了方便。</li><li>定义增强功能：就像在JDK动态代理中一样，您需要确定您希望添加到原始类中的额外或增强功能。</li><li>生成动态代理对象：使用Cglib的Enhancer对象可以为上一步中定义的原始类生成动态代理对象。为了实现此过程，确保项目中包含了Cglib的必要依赖。幸运的是这些依赖已经包含在spring-context库中，从而简化了集成过程.</li></ol><h3 id="_4-1-创建目标对象" tabindex="-1">4.1 创建目标对象 <a class="header-anchor" href="#_4-1-创建目标对象" aria-label="Permalink to &quot;4.1 创建目标对象&quot;">​</a></h3><p>首先，我们需要创建一个目标对象，这个目标对象将被代理。在本例中，我们创建一个UserServiceImpl类作为目标对象，它包含一个addUser方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;添加用户：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-2-创建切面类" tabindex="-1">4.2 创建切面类 <a class="header-anchor" href="#_4-2-创建切面类" aria-label="Permalink to &quot;4.2 创建切面类&quot;">​</a></h3><p>接下来，我们需要创建一个切面类，这个切面类将在目标对象执行前或执行后执行一些操作。在本例中，我们创建一个LogAspect类作为切面类，它包含一个before方法，在目标对象执行前打印日志。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogAspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开始执行方法...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-3-配置spring-aop" tabindex="-1">4.3 配置Spring AOP <a class="header-anchor" href="#_4-3-配置spring-aop" aria-label="Permalink to &quot;4.3 配置Spring AOP&quot;">​</a></h3><h4 id="_1-配置文件方式" tabindex="-1">1.配置文件方式 <a class="header-anchor" href="#_1-配置文件方式" aria-label="Permalink to &quot;1.配置文件方式&quot;">​</a></h4><p>接下来，我们需要配置Spring AOP，以便在运行时生成代理对象。在本例中，我们使用XML配置文件来配置Spring AOP。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bean id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.javatop.UserService&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">property name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userServiceImpl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userServiceImpl&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bean id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logAspect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.javatop.LogAspect&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aspect ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logAspect&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">before method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pointcut</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;execution(* org.javatop.UserServiceImpl.addUser(..))&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aspect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>在上面的配置中，我们首先创建了一个UserService类，并将其注入到UserServiceImpl类中。然后，我们创建了一个LogAspect类，并将其配置为切面类。最后，我们使用aop:before标签来定义一个切入点，指定在执行UserServiceImpl类的addUser方法之前执行LogAspect类的before方法。‘</p><h4 id="_2-原始方式" tabindex="-1">2.原始方式 <a class="header-anchor" href="#_2-原始方式" aria-label="Permalink to &quot;2.原始方式&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestCglibProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TestCglibProxy.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建原始对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UserService userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建Cglib提供的Enhancer对象，用于设置好创建代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Enhancer enhancer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Enhancer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TestCglibProxy.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置被代理类(原始父类)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置方法拦截器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MethodInterceptor methodInterceptor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 等同于InvocationHandler中的invoke方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intercept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">objects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MethodProxy </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">methodProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;log before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Object ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userService, objects);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;log after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(methodInterceptor);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UserService userServiceProxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (UserService) enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userServiceProxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Leo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-4-测试" tabindex="-1">4.4 测试 <a class="header-anchor" href="#_4-4-测试" aria-label="Permalink to &quot;4.4 测试&quot;">​</a></h3><p>最后，我们可以编写一个测试类来测试我们的代码。在本例中，我们创建一个Main类，通过Spring容器获取UserService对象，并调用其addUser方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ApplicationContext context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassPathXmlApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;applicationContext.xml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UserService userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (UserService) context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Leo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当我们运行Test类时，我们可以看到在执行addUser方法之前打印了一条日志。</p><h2 id="_5-最后总结" tabindex="-1">5.最后总结 <a class="header-anchor" href="#_5-最后总结" aria-label="Permalink to &quot;5.最后总结&quot;">​</a></h2><p>JDK动态代理以接口为核心，通过Proxy.newInstance()方法为我们提供了创建代理对象的能力，要求原始类必须实现某个接口。而Cglib动态代理则更为灵活，不受接口的限制。通过Enhancer.create()，它直接生成原始类的子类，并在其中嵌入额外功能，从而实现代理。当然我们也可以通过设置让Spring在创建的时候只使用Cglib而不使用JDK</p><p>Spring AOP聪明地整合了这两种机制，为开发者提供了无缝的体验。它默认采用JDK动态代理，但当遇到没有实现接口的原始类时，会智能切换到Cglib动态代理。</p><p>本文介绍了如何使用Spring5整合CGlib动态代理实现AOP功能，并给出了具体的案例。通过使用动态代理，我们可以在运行时生成代理对象，从而实现对目标对象的增强。在实际开发中，动态代理是一个非常重要的概念，可以帮助我们更好地管理代码，提高代码的可维护性和可扩展性。</p><h2 id="_6-参考文献" tabindex="-1">6.参考文献 <a class="header-anchor" href="#_6-参考文献" aria-label="Permalink to &quot;6.参考文献&quot;">​</a></h2><ul><li><a href="https://www.itheima.com/news/20210525/165219.html" target="_blank" rel="noreferrer">https://www.itheima.com/news/20210525/165219.html</a></li><li><a href="https://blog.csdn.net/luoyoub/article/details/80101376" target="_blank" rel="noreferrer">https://blog.csdn.net/luoyoub/article/details/80101376</a></li><li><a href="https://spring.io/" target="_blank" rel="noreferrer">https://spring.io/</a></li><li><a href="https://blog.csdn.net/qq_43266723/article/details/133488696" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_43266723/article/details/133488696</a></li></ul><h2 id="_7-总结" tabindex="-1">7.总结 <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7.总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>`,41)]))}const o=i(h,[["render",t]]);export{d as __pageData,o as default};
