import{_ as a,o as i,c as n,a7 as e}from"./chunks/framework.CU6B6cvq.js";const c=JSON.parse('{"title":"Docker部署SpringBoot项目","description":"","frontmatter":{"title":"Docker部署SpringBoot项目","order":9,"tag":["docker🛥️"],"category":["docker🛥️"],"pageview":false,"date":"2023-12-13T15:21:31.000Z","comment":false,"breadcrumb":false},"headers":[],"relativePath":"middleware/docker/docker-deploy-springboot-project.md","filePath":"middleware/docker/docker-deploy-springboot-project.md"}'),t={name:"middleware/docker/docker-deploy-springboot-project.md"};function p(l,s,h,r,k,o){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="docker部署springboot项目" tabindex="-1">Docker部署SpringBoot项目 <a class="header-anchor" href="#docker部署springboot项目" aria-label="Permalink to &quot;Docker部署SpringBoot项目&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>笔者开发环境： 华为云服务器 + IDEA2023 + JDK1.8 + Maven3.8。</p><p>​</p><h2 id="_2-实战步骤" tabindex="-1">2. 实战步骤 <a class="header-anchor" href="#_2-实战步骤" aria-label="Permalink to &quot;2. 实战步骤&quot;">​</a></h2><h3 id="_2-1-编写测试接口" tabindex="-1">2.1 编写测试接口 <a class="header-anchor" href="#_2-1-编写测试接口" aria-label="Permalink to &quot;2.1 编写测试接口&quot;">​</a></h3><p>打开我们的IDEA创建一个简单的SpringBoot项目，编写TestController，编写一个简单的测试接口。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.leo.demo02.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> : Leo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @date 2023-10-17 14:15</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @description : 测试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;这是用来测试SpringBoot接口部署到服务器的接口测试!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-2-使用maven打jar包" tabindex="-1">2.2 使用Maven打jar包 <a class="header-anchor" href="#_2-2-使用maven打jar包" aria-label="Permalink to &quot;2.2 使用Maven打jar包&quot;">​</a></h3><h4 id="_1-使用package命令打包" tabindex="-1">1.使用package命令打包 <a class="header-anchor" href="#_1-使用package命令打包" aria-label="Permalink to &quot;1.使用package命令打包&quot;">​</a></h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171421024.png" alt="image-20231017142102923"></p><h4 id="_2-打包成功" tabindex="-1">2. 打包成功 <a class="header-anchor" href="#_2-打包成功" aria-label="Permalink to &quot;2. 打包成功&quot;">​</a></h4><p>看到下面BUIDL SUCCES 就说明打包成功了</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171424843.png" alt="image-20231017142404696"></p><h4 id="_3-查看jar包" tabindex="-1">3. 查看jar包 <a class="header-anchor" href="#_3-查看jar包" aria-label="Permalink to &quot;3. 查看jar包&quot;">​</a></h4><p>可以在target目录看到我们的jar包</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171424983.png" alt="image-20231017142457929"></p><h4 id="_4-启动jar包进行测试" tabindex="-1">4.启动jar包进行测试 <a class="header-anchor" href="#_4-启动jar包进行测试" aria-label="Permalink to &quot;4.启动jar包进行测试&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java -jar jar包名称（填写你自己的jar包名称）</span></span></code></pre></div><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171427007.png" alt="image-20231017142739915"></p><p>启动成功，浏览器访问ip + 端口号 + 访问路径即可访问。</p><p>​ <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171428521.png" alt="image-20231017142855477"></p><p><strong>访问成功!</strong></p><h3 id="_2-3-编写dockerfile文件内容" tabindex="-1">2.3 编写Dockerfile文件内容 <a class="header-anchor" href="#_2-3-编写dockerfile文件内容" aria-label="Permalink to &quot;2.3 编写Dockerfile文件内容&quot;">​</a></h3><p>这里笔者使用的是JDK11</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openjdk:11</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # FROM: 基础镜像，基于jdk8镜像开始</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app.jar</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # COPY: 将应用的配置文件也拷贝到镜像中。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--server.port=8400&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8400</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # EXPOSE：声明端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/app.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ENTRYPOINT：docker启动时，运行的命令，这里容器启动时直接运行jar服务。</span></span></code></pre></div><h3 id="_2-4-把jar包以及dockerfile上传到linux服务器" tabindex="-1">2.4 把jar包以及Dockerfile上传到Linux服务器 <a class="header-anchor" href="#_2-4-把jar包以及dockerfile上传到linux服务器" aria-label="Permalink to &quot;2.4 把jar包以及Dockerfile上传到Linux服务器&quot;">​</a></h3><p><strong>上传jar包和dockerfile文件</strong>到Linux服务器上去。</p><p>这里笔者选择的是Finalshell + 华为云服务器，大家可以自行选择。</p><p>在software目录里面创建一个test目录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/software/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><p><strong>注意： software这个目录是笔者平时存放软件的地方，大家没有的话可以自行创建。</strong></p><p>把jar包和dockerfile文件上传到test目录</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171436569.png" alt="image-20231017143614515"></p><h3 id="_2-4-生成镜像" tabindex="-1">2.4 生成镜像 <a class="header-anchor" href="#_2-4-生成镜像" aria-label="Permalink to &quot;2.4 生成镜像&quot;">​</a></h3><p>目录切换到test目录并查看</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171436793.png" alt="image-20231017143654734"></p><p>文件已上传完毕，可以进行生产镜像了。</p><p><strong>注意： 必须这两个东西都在一个文件下，才可以。</strong></p><ul><li>docker bulid 是打包命令</li><li><code>-t</code> − 给镜像加一个Tag</li><li>后面跟的 test 就是为这个镜像取的名字</li><li><code>.</code> 小数点表示当前目录，即Dockerfile所在目录</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>看到下面说明镜像已经生成完毕。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171438171.png" alt="image-20231017143832087"></p><h3 id="_2-5-后台启动容器" tabindex="-1">2.5 后台启动容器 <a class="header-anchor" href="#_2-5-后台启动容器" aria-label="Permalink to &quot;2.5 后台启动容器&quot;">​</a></h3><p>使用命令查看我们生成的镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171439842.png" alt="image-20231017143952774"></p><p>确认没问题之后我们开始后台启动容器。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8400:8400</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><ul><li>-d 是后台运行</li><li>-p 8400:8400是端口映射</li><li>--name 取名字</li><li>最后跟的 test 是我打包好的镜像名称。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171445868.png" alt="image-20231017144513816"></p><p>到这里说明我们的容器已经正常运行了。</p><h3 id="_2-6-测试" tabindex="-1">2.6 测试 <a class="header-anchor" href="#_2-6-测试" aria-label="Permalink to &quot;2.6 测试&quot;">​</a></h3><p>浏览器访问ip + 端口号 + 访问路径即可访问。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171445670.png" alt="image-20231017144552622"></p><p>大功告成!</p><h2 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3. 总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>`,59)]))}const g=a(t,[["render",p]]);export{c as __pageData,g as default};
