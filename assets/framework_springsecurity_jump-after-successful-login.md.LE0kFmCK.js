import{_ as e,o as s,c as r,a7 as i}from"./chunks/framework.CU6B6cvq.js";const g=JSON.parse('{"title":"登陆成功后的跳转","description":"","frontmatter":{"title":"登陆成功后的跳转","order":14,"category":["springsecurity"],"tag":["springsecurity"],"pageview":false,"date":"2023-12-13T15:34:06.000Z","comment":false,"breadcrumb":false},"headers":[],"relativePath":"framework/springsecurity/jump-after-successful-login.md","filePath":"framework/springsecurity/jump-after-successful-login.md"}'),t={name:"framework/springsecurity/jump-after-successful-login.md"};function n(o,a,p,c,l,h){return s(),r("div",null,a[0]||(a[0]=[i('<h1 id="springsecurity6-登陆后的跳转" tabindex="-1">SpringSecurity6 | 登陆后的跳转 <a class="header-anchor" href="#springsecurity6-登陆后的跳转" aria-label="Permalink to &quot;SpringSecurity6 | 登陆后的跳转&quot;">​</a></h1><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312102128628.png" alt="image-20231030235443828"></p><h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>大家好，我是Leo哥🫣🫣🫣，接到<a href="https://gaoziman.blog.csdn.net/article/details/134864581" target="_blank" rel="noreferrer">上一节</a>，我们学习通过SpringSecurity的一些自定义配置来完成我们自定义登录界面。这篇文章我们主要来介绍一下我们通过自定义登录界面之后的一些细节处理。好了，话不多说让我们开始吧😎😎😎。</p><h2 id="_2-登录成功的处理" tabindex="-1">2.登录成功的处理 <a class="header-anchor" href="#_2-登录成功的处理" aria-label="Permalink to &quot;2.登录成功的处理&quot;">​</a></h2><p>在我们访问hello接口之前，我们需要进行登录认证，通过自定义用户名和密码登录成功之后才可以访问登录接口。</p><p>那么是否可以对登录成功之后的跳转进行处理呢。</p><p>当然可以，SpringSecurity给我提供了API进行处理。</p><h3 id="_2-1-forward跳转" tabindex="-1">2.1 forward跳转 <a class="header-anchor" href="#_2-1-forward跳转" aria-label="Permalink to &quot;2.1 forward跳转&quot;">​</a></h3><p>如果我们想要登录之后跳转到指定的接口的话，可以使用<code>successForwardUrl()</code>来进行跳转。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312102146617.png" alt="image-20231210214652583"></p><p>这样的话，不论你登录前访问的是什么接口，你通过登录之后，会默认跳转到<code>hello</code>接口。</p><h3 id="_2-2-redirect重定向" tabindex="-1">2.2 redirect重定向 <a class="header-anchor" href="#_2-2-redirect重定向" aria-label="Permalink to &quot;2.2 redirect重定向&quot;">​</a></h3><p>而redirect确跟forward恰恰相反，如果之前有请求路径，<strong>会优先跳转之前请求的路径</strong>。</p><p>就比如我们最开始访问的是test接口，认证通过之后，他跳转到test接口中，而不是hello接口中。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312102153685.png" alt="image-20231210215333637"></p><p>如果按照我的以上配置，还不能正常访问的话，大家可以添加一条设置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>大家可以先把csrf给关闭了，关于csrf我们后面会讲。</p><h2 id="_4-总结" tabindex="-1">4.总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4.总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>',22)]))}const u=e(t,[["render",n]]);export{g as __pageData,u as default};
