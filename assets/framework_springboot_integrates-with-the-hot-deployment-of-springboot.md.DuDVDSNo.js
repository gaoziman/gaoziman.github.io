import{_ as i,o as s,c as t,a7 as e}from"./chunks/framework.CU6B6cvq.js";const d=JSON.parse('{"title":"SpringBoot热部署","description":"","frontmatter":{"title":"SpringBoot热部署","order":2,"tag":["Springboot"],"category":["Springboot"],"pageview":false,"date":"2024-03-29T14:29:10.000Z","comment":false},"headers":[],"relativePath":"framework/springboot/integrates-with-the-hot-deployment-of-springboot.md","filePath":"framework/springboot/integrates-with-the-hot-deployment-of-springboot.md"}'),n={name:"framework/springboot/integrates-with-the-hot-deployment-of-springboot.md"};function o(p,a,l,r,h,g){return s(),t("div",null,a[0]||(a[0]=[e(`<h1 id="idea2023版本整合springboot热部署" tabindex="-1">IDEA2023版本整合SpringBoot热部署 <a class="header-anchor" href="#idea2023版本整合springboot热部署" aria-label="Permalink to &quot;IDEA2023版本整合SpringBoot热部署&quot;">​</a></h1><h2 id="_1-前言☕" tabindex="-1">1.前言☕ <a class="header-anchor" href="#_1-前言☕" aria-label="Permalink to &quot;1.前言☕&quot;">​</a></h2><p>今天来讲讲IDEA2023新版本如何配合SpringBoot使用热部署工具。</p><h2 id="_2-引入依赖" tabindex="-1">2.引入依赖 <a class="header-anchor" href="#_2-引入依赖" aria-label="Permalink to &quot;2.引入依赖&quot;">​</a></h2><p>在我们的SpringBoot中引入pom依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-devtools&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;runtime&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意：加入依赖后别忘记刷新Maven哦。</p><p><strong>这里可以看依赖是否下载成功</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202403281540259.png" alt="image-20240328154058224"></p><h2 id="_3-配置项目自动编译" tabindex="-1">3.配置项目自动编译 <a class="header-anchor" href="#_3-配置项目自动编译" aria-label="Permalink to &quot;3.配置项目自动编译&quot;">​</a></h2><p>勾选： settings-&gt;Build，Excecution，Deployment-&gt;Compiler -&gt; build project automatic，点击apply</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202403281543216.png" alt="image-20240328154323103"></p><p>勾选：settings-&gt; AdvancedSettings -&gt; Compiler -&gt; 编译器中的第一个选项，如下图，点击apply</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202403281546597.png" alt="image-20240328154620449"></p><p>按住 <code>ctrl+shift+Alt+/</code> 四个键，点击-&gt; Registry-&gt; <code>compiler.automake.postpone.when.idle.less.than</code> 后的value值设置为0；</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202403281547327.png" alt="image-20240328154730262"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202403281547061.png" alt="image-20240328154758999"></p><h2 id="_4-重启项目测试" tabindex="-1">4.重启项目测试 <a class="header-anchor" href="#_4-重启项目测试" aria-label="Permalink to &quot;4.重启项目测试&quot;">​</a></h2><p>看到启动日志中的 <strong>restartedMain</strong> 就说明我们配置已经生效了。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202403281548319.png" alt="image-20240328154847101"></p><h2 id="_5-总结" tabindex="-1">5.总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5.总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>`,23)]))}const k=i(n,[["render",o]]);export{d as __pageData,k as default};
