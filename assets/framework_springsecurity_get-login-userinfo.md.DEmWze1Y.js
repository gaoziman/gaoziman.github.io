import{_ as s,o as a,c as t,a7 as n}from"./chunks/framework.CU6B6cvq.js";const c=JSON.parse('{"title":"获取登录用户的认证信息","description":"","frontmatter":{"title":"获取登录用户的认证信息","order":16,"category":["springsecurity"],"tag":["springsecurity"],"pageview":false,"date":"2024-07-09T15:34:06.000Z","comment":false,"breadcrumb":false},"headers":[],"relativePath":"framework/springsecurity/get-login-userinfo.md","filePath":"framework/springsecurity/get-login-userinfo.md"}'),e={name:"framework/springsecurity/get-login-userinfo.md"};function l(h,i,p,r,o,k){return a(),t("div",null,i[0]||(i[0]=[n(`<p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312270933695.png" alt="image-20231030235443828"></p><h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>大家好，我是Leo哥🫣🫣🫣，接到<a href="https://gaoziman.blog.csdn.net/article/details/135237133" target="_blank" rel="noreferrer">上一节</a>，我们学习通过SpringSecurity退出登录之后的JSON处理。这篇文章我们主要来介绍一下登录成功之后如何获取用户信息。好了，话不多说让我们开始吧😎😎😎。</p><h2 id="_2-概述" tabindex="-1">2.概述 <a class="header-anchor" href="#_2-概述" aria-label="Permalink to &quot;2.概述&quot;">​</a></h2><p>在<a href="https://gaoziman.blog.csdn.net/article/details/135237133" target="_blank" rel="noreferrer">这篇文章中</a>我们添加了一个主页面，用超链接来进行退出登录，而不是频繁在地址栏输入URL。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312270957478.png" alt="image-20231227095749441"></p><h2 id="_3-获取用户认证信息" tabindex="-1">3.获取用户认证信息 <a class="header-anchor" href="#_3-获取用户认证信息" aria-label="Permalink to &quot;3.获取用户认证信息&quot;">​</a></h2><p>我们登录之后，我们用户的信息，存储在哪里呢，我们又该如何进行获取呢，今天我们接着往下聊。</p><p>用户登录成功后，用户的信息存储在 <code>SecurityContext</code> 中。<code>SecurityContext</code> 是由 <code>SecurityContextHolder</code> 管理的，它是 Spring Security 的核心组件之一。</p><p><strong>存储用户信息的过程</strong></p><ol><li><strong>用户认证</strong>：当用户通过表单登录或其他认证方式成功登录后，SpringSecurity 会创建一个 **Authentication ** 对象，该对象包含用户的认证信息。</li><li><strong>存储认证信息</strong>：<code>Authentication</code> 对象被存储在 <code>SecurityContext</code> 中。</li><li><strong>上下文管理</strong>：<code>SecurityContext</code> 由 <code>SecurityContextHolder</code> 管理，通常与当前线程绑定，以确保在请求处理过程中可以随时访问用户信息。</li></ol><p>我们通过官网的一张图更清晰的来了解SecurityContextHolder。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/2024/202406211408759.png" alt="image-20240621140850737"></p><p>此时我们就可以通过 <code>SecurityContextHolder</code> 来获取用户的认证信息了。话不多说，我们直接上代码。</p><p>我们这里在我们之前的hello接口添加必要代码即可。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/2024/202406211404169.png" alt="image-20240621140440102"></p><p>此时，登录成功之后访问hello接口，即可在idea控制台中看到我们的信息。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/2024/202406211407806.png" alt="image-20240621140711781"></p><h2 id="_4-探知原理" tabindex="-1">4. 探知原理 <a class="header-anchor" href="#_4-探知原理" aria-label="Permalink to &quot;4. 探知原理&quot;">​</a></h2><p>上面我们知道了通过 <strong>SecurityContextHolder</strong> 这个类来获取用户认证信息，那么内部究竟是如何处理的呢。我们打开源码一探究竟。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/2024/202406211415147.png" alt="image-20240621141524116"></p><p><code>SecurityContextHolder</code> 通过 <code>initializeStrategy</code> 方法初始化安全上下文的存储策略，根据配置选择适当的策略类来管理安全上下文。在默认情</p><p>况下，使用 <code>ThreadLocal</code> 存储安全上下文，可以根据需要切换到可继承的线程本地变量策略。</p><p>那么，用户的认证数据是在什么时候存储的呢？</p><p>表单认证时，在 AbstractAuthenticationProcessingFilter 过滤器的 doFilter() 方法中，调用UsernamePasswordAuthenticationFilter 过滤器的 <strong>attemptAuthentication()</strong> 方法进行用户认证，认证通过则返回认证后的 Authentication 对象，否则返回 null 。认证成功后，会再调用自已的successfulAuthentication() 方法存储当前的认证信息。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/2024/202406211417865.png" alt="image-20240621141759834"></p><p>在 AbstractAuthenticationProcessingFilter 过滤器的 successfulAuthentication() 方法中，把验证通过的用户认证信息先存入 SecurityContext ，然后再调用ThreadLocalSecurityContextHolderStrategy 类中的 setContext() 方法，把 SecurityContext 存入ThreadLocal 中。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/2024/202406211418271.png" alt="image-20240621141842244"></p><p>调用 ThreadLocalSecurityContextHolderStrategy 类中的 <strong>setContext()</strong> 方法，把 SecurityContext 存入 ThreadLocal 中。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/2024/202406211419797.png" alt="image-20240621141912757"></p><h2 id="_5-网页拓展" tabindex="-1">5. 网页拓展 <a class="header-anchor" href="#_5-网页拓展" aria-label="Permalink to &quot;5. 网页拓展&quot;">​</a></h2><p>除了在我们Java后端通过 <strong>SecurityContextHolder</strong> 获取用户的登录信息之外，我们还可以通过在前端网页上获取我们的登录信息，下面跟着一起来操作吧。</p><h3 id="_5-1-引入依赖" tabindex="-1">5.1 引入依赖 <a class="header-anchor" href="#_5-1-引入依赖" aria-label="Permalink to &quot;5.1 引入依赖&quot;">​</a></h3><p>在pom文件中引入以下依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.thymeleaf.extras&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;thymeleaf-extras-springsecurity6&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_5-2-引入命名空间" tabindex="-1">5.2 引入命名空间 <a class="header-anchor" href="#_5-2-引入命名空间" aria-label="Permalink to &quot;5.2 引入命名空间&quot;">​</a></h3><p>在login.html中引入指定的命名空间。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xmlns:th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.thymeleaf.org&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xmlns:sec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_5-3-在网页中使用" tabindex="-1">5.3 在网页中使用 <a class="header-anchor" href="#_5-3-在网页中使用" aria-label="Permalink to &quot;5.3 在网页中使用&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--获取登录用户信息--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sec:authentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;principal.username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sec:authentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;principal.authorities&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sec:authentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;principal.accountNonExpired&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sec:authentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;principal.accountNonLocked&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sec:authentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;principal.credentialsNonExpired&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_6-小结" tabindex="-1">6. 小结 <a class="header-anchor" href="#_6-小结" aria-label="Permalink to &quot;6. 小结&quot;">​</a></h2><ul><li>SecurityContextHolder：提供对 SecurityContext 安全上下文的访问，默认情况下，它使用 ThreadLocal 对象来存储安全上下文，它是线程安全的</li><li>SecurityContext：安全上下文，内部包含了当前认证用户的详细信息。</li><li>Authentication：存储当前用户的详细信息（Principal 用户信息、Credentials 密码信息、Authorities 权限信息）。</li></ul><p><strong>SecurityContextHolder有三种工作策略模式：</strong></p><ul><li>MODE_THREADLOCAL(默认)：本地线程模式，将认证用户信息和当前线程绑定存在ThreadLocal 中，在同一个线程内可以获取到相同的安全上下文</li><li>MODE_INHERITABLETHREADLOCAL：可继承的本地线程模式，将安全上下文复制给当前线程的子线程，就可以实现多个父子线程可以共享安全上下文</li><li>MODE_GLOBAL：全局模式，所有线程都能看到相同的安全上下文实例</li></ul><h2 id="_7-总结" tabindex="-1">7. 总结 <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7. 总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>`,47)]))}const d=s(e,[["render",l]]);export{c as __pageData,d as default};
