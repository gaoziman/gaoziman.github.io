import{_ as i,o as a,c as t,a7 as n}from"./chunks/framework.CU6B6cvq.js";const g=JSON.parse('{"title":"核心过滤器","description":"","frontmatter":{"title":"核心过滤器","order":5,"category":["springsecurity"],"tag":["springsecurity"],"pageview":false,"date":"2023-11-15T23:44:03.000Z","comment":false,"breadcrumb":false},"headers":[],"relativePath":"framework/springsecurity/core-filters.md","filePath":"framework/springsecurity/core-filters.md"}'),e={name:"framework/springsecurity/core-filters.md"};function l(h,s,p,k,r,E){return a(),t("div",null,s[0]||(s[0]=[n(`<p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310302354916.png" alt="image-20231030235443828"></p><h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>大家好，我是Leo哥🫣🫣🫣，上一节我们通过源码剖析以及图文分析，了解了关于<code>委派筛选器代理</code>和<code>过滤器链代理</code>的原理和作用。这节课我们接着学习SpringSecurity的过滤器，了解SpringSecurity中都有哪些核心过滤器。好了，话不多说让我们开始吧😎😎😎。</p><h2 id="_2-前提知识" tabindex="-1">2.前提知识 <a class="header-anchor" href="#_2-前提知识" aria-label="Permalink to &quot;2.前提知识&quot;">​</a></h2><p>上一节中我们详细的剖析了委派筛选器代理---&gt;<strong>DelegatingFilterProxy</strong>,它的作用就是：实现把Servlet容器中的 Filter 同 Spring 容器中的 bean 关联起来，<code>DelegatingFilterProxy</code>实现了Filter接口，Servlet容器启动就会加载好这个类。借助他可以实现普通的Filter拦截到的Http请求交由FilterChainProxy。</p><p><code>FilterChainProxy</code> 是<strong>顶层管理者</strong>，统一管理 SecurityFilter和 SecurityFllterChain过滤器链</p><p>当请求到达 FilterChainProxy 时，会根据当前请求匹配SecurityFilterChain，然后将请求依次转发给 SecurityFilterChain 中的 SecurityFilter中。</p><p>回到我们上一张分析图。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202311072047866.png" alt="image-20231107204747766"></p><p>大家可以再次梳理一下当一个Http请求发出直到获取Web资源的整个过程。</p><h2 id="_3-核心过滤器" tabindex="-1">3.核心过滤器 <a class="header-anchor" href="#_3-核心过滤器" aria-label="Permalink to &quot;3.核心过滤器&quot;">​</a></h2><p>接下来我们主要介绍<code>Spring Security</code>中默认的<code>15</code>个过滤器相关作用。</p><p>这个时候有人问啦，Leo哥，你怎么知道SpringSecurity默认是15个核心过滤器呢，为啥不是14个。</p><p>哈哈哈，这个问题问得好，既然我敢这么说，那一定是有把握啦，下面我们启动IDEA看看。</p><p>打开IDEA，搜索<strong>WebSecurityConfiguration</strong>这个总配置类</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202311072355165.png" alt="image-20231107235513951"></p><p>并在这里打一个断点，之后重启IDEA，记得以DEBUG方式运行。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202311072356914.png" alt="image-20231107235650717"></p><p>我们鼠标放在这一行进行查看，确实是项目已启动就加载了这个15个过滤器。嘿嘿。</p><h3 id="_3-1disableencodeurlfilter" tabindex="-1">3.1DisableEncodeUrlFilter <a class="header-anchor" href="#_3-1disableencodeurlfilter" aria-label="Permalink to &quot;3.1DisableEncodeUrlFilter&quot;">​</a></h3><p>该过滤器用于禁用对URL进行编码的功能。它的作用是阻止Spring Security对URL进行自动编码，从而使得URL可以保持原始状态。</p><p>在某些情况下，用户可能希望禁用Spring Security对URL的编码，例如在特定的代理服务器或反向代理服务器上，因为这些代理服务器可能会自己处理URL的编码。此时就可以使用 <code>DisableEncodeUrlFilter</code> 来禁用Spring Security对URL的编码。</p><p>当你在Spring Security配置中加入 <code>DisableEncodeUrlFilter</code> 时，它将会在过滤器链中起作用，禁止Spring Security对URL进行编码。具体来说，它会覆盖默认的 <code>DefaultSecurityFilterChain</code> 配置，以确保 URL 编码被禁用。</p><p><strong>在XML配置中如下所示:</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">beans:bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;disableUrlEncodingFilter&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.security.web.servletapi.DisableEncodeUrlFilter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">intercept-url</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/somepattern&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;permitAll&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">custom-filter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;disableUrlEncodingFilter&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SECURITY_CONTEXT_FILTER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>在Java配置中，如下所示:</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">antMatchers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/somepattern&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 添加 DisableEncodeUrlFilter 到过滤器链中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DisableEncodeUrlFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), SecurityContextPersistenceFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个过滤器有什么用？ 首先实现<code>Session</code>会话，可以通过以下两种方式</p><ul><li><strong>Cookie</strong>：浏览器设置，每次请求自动携带给服务端</li><li><strong>URL重写</strong>：<code>Cookie</code>被禁用时，后端响应将<code>sessionId</code>拼接在<code>URL</code>后进行重写，传递给页面</li></ul><p><code>DisableEncodeUrlFilter</code>禁用<code>HttpServletResponse</code>对<code>URL</code>进行编码重写，以防止将<code>sessionId</code>在<code>HTTP</code>访问日志等内容中泄露。</p><p><code>DisableEncodeUrlResponseWrapper</code>，我们来简单来一下他的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DisableEncodeUrlResponseWrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServletResponseWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DisableEncodeUrlResponseWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 直接返回，不重写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeRedirectURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 直接返回，不重写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>需要注意的是，虽然禁用URL编码可能在特定的情况下很有用，但这也可能会导致一些安全性问题，因为URL编码通常是为了<strong>防止跨站脚本（XSS）攻击</strong>等安全问题。因此，禁用URL编码应该慎重考虑，并且需要在充分了解其潜在风险的情况下使用。</p><h3 id="_3-2webasyncmanagerintegrationfilter" tabindex="-1">3.2WebAsyncManagerIntegrationFilter <a class="header-anchor" href="#_3-2webasyncmanagerintegrationfilter" aria-label="Permalink to &quot;3.2WebAsyncManagerIntegrationFilter&quot;">​</a></h3><p><code>WebAsyncManagerIntegrationFilter</code>用于集成<strong>Web异步管理器(WebAsyncManager)</strong>。它在处理异步请求时起着重要的作用，并确保在异步处理过程中正确地管理安全上下文。</p><p><code>WebAsyncManagerIntegrationFilter</code>是第二个执行的过滤器，从名字上可以知道和异常请求有关。</p><p>具体来说，<code>WebAsyncManagerIntegrationFilter</code>负责在异步处理过程中同步安全上下文，以确保安全上下文能够正确传播到异步执行的线程中。这对于处理异步请求非常重要，因为在异步处理中，线程可能会发生切换，而安全上下文的正确传递对于安全操作至关重要。</p><p>在实际应用中，<code>WebAsyncManagerIntegrationFilter</code>通常与Spring MVC的异步请求处理机制一起使用，确保在使用<code>Callable</code>或<code>DeferredResult</code>等异步处理方式时，安全上下文能够正确传播。</p><p>默认情况下，<code>Spring Security </code>经过认证后，认证信息会存储在当前线程<code>ThreadLocal</code>（不是<code>InheritableThreadLocal</code>）中，如果是异步，主线程已经执行完毕，子线程执行过程中则无法获取当前认证信息。</p><p>在<code>Spring </code>中的异步通过<code>WebAsyncManager</code>管理异步请求，异步请求交由<code>TaskExecutor</code>线程池去处理，<code>WebAsyncManager</code>提供了一个拦截器机制，可以用拦截器将主线程中的数据传递到子线程中。</p><p>下面是一个简单的示例，演示了如何在SpringSecurity配置中使用WebAsyncManagerIntegrationFilter：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebAsyncManagerIntegrationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加WebAsyncManagerIntegrationFilter到过滤器链中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>需要注意的是，WebAsyncManagerIntegrationFilter通常不需要显式地在配置中添加，因为它通常会由Spring Security自动添加到过滤器链中。但是，如果你有特殊的需求或者定制化的异步处理方式，你可能需要显式地添加WebAsyncManagerIntegrationFilter。</p><p>总之，WebAsyncManagerIntegrationFilter在SpringSecurity中扮演着确保安全上下文正确传播到异步处理过程中的重要角色，它是保证异步请求处理安全性的关键组成部分。</p><h3 id="_3-3headerwriterfilter" tabindex="-1">3.3HeaderWriterFilter <a class="header-anchor" href="#_3-3headerwriterfilter" aria-label="Permalink to &quot;3.3HeaderWriterFilter&quot;">​</a></h3><p><code>HeaderWriterFilter</code>字面理解为请求头写入过滤器，他的作用是将某些头信息添加到响应中，添加某些启用浏览器保护的头信息非常有用，如<code>X-Frame-Options</code>、<code>X-XSS-Protection</code>、<code>X-Content-Type-Options</code>等，增加一些安全性。</p><p>逻辑也比较简单，就是添加头部信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilterInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	// shouldWriteHeadersEagerly 直接添加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shouldWriteHeadersEagerly) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doHeadersBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, filterChain);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doHeadersAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, filterChain);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>具体来说，<code>SecurityContextHolderFilter</code> 通过 <code>SecurityContextHolder</code> 来管理安全上下文。<code>SecurityContextHolder</code> 是 Spring Security 提供的一个持有安全上下文的地方，它使用 <code>ThreadLocal</code> 来确保在同一线程内安全上下文的传递。</p><p>在请求到达后端应用程序时，<code>SecurityContextHolderFilter</code> 将当前的安全上下文信息从 HTTP 请求中获取，并存储在 <code>SecurityContextHolder</code> 中。这样，在请求的任何地方，都可以通过 <code>SecurityContextHolder</code> 来获取当前用户的身份、权限等安全信息。</p><p>在 <strong>SpringSecurity</strong> 配置中，通常会自动包含 <code>SecurityContextHolderFilter</code>，因此在大多数情况下不需要显式地配置该过滤器。例如，在基于 Java 的配置中，你通常只需要通过 <code>@EnableWebSecurity</code> 注解启用 Spring Security，并进行相应的配置即可。</p><p>下面是一个简单的示例，演示了如何在 Spring Security 中进行基本的配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">httpBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，虽然没有显式地添加 <code>SecurityContextHolderFilter</code>，但它会被自动包含在 Spring Security 的过滤器链中。</p><p>总之，<code>SecurityContextHolderFilter</code> 在 Spring Security 中扮演着确保安全上下文正确传播和管理的重要角色，它是整个安全框架中的关键组成部分。</p><h3 id="_3-4csrffilter" tabindex="-1">3.4CsrfFilter <a class="header-anchor" href="#_3-4csrffilter" aria-label="Permalink to &quot;3.4CsrfFilter&quot;">​</a></h3><p><code>CsrfFilter</code> 是SpringSecurity 中用于防止 **CSRF(跨站请求伪造)**攻击的过滤器。CSRF 攻击是一种利用用户在其他网站上已经登录的身份信息，来发起对目标网站的恶意请求的攻击方式。为了防止这种攻击，SpringSecurity 提供了 <code>CsrfFilter</code> 来加强应用程序的安全性。</p><p><code>CsrfFilter</code> 的主要作用是验证每个非安全 HTTP 请求（例如 POST、PUT、DELETE 等）中是否包含有效的 CSRF 令牌。如果请求中缺少有效的 CSRF 令牌，<code>CsrfFilter</code> 将拒绝该请求，并返回相应的错误信息。</p><p>在 Spring Security 中，默认情况下，<code>CsrfFilter</code> 是自动启用的，它会在请求中自动添加 CSRF 令牌，并验证每个非安全请求中的令牌是否有效。同时，Spring Security 还提供了一些配置选项，以便开发人员可以根据应用程序的需求进行定制化的 CSRF 防护策略。</p><p>下面是一个简单的示例，演示了如何在 SpringSecurity 中进行基本的 <strong>CSRF</strong> 配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 禁用 CSRF 防护</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，通过禁用<strong>CSRF</strong>防护，<code>CsrfFilter</code> 将不再生效，从而允许非安全请求不携带 CSRF 令牌。</p><p>总之，<code>CsrfFilter</code> 在 SpringSecurity 中扮演着加强应用程序安全性的重要角色，它是保护应用程序免受 CSRF 攻击的关键组成部分。通过合理地配置和使用 <code>CsrfFilter</code>，可以有效地提高应用程序的安全性。</p><h3 id="_3-5securitycontextholderfilter" tabindex="-1">3.5SecurityContextHolderFilter <a class="header-anchor" href="#_3-5securitycontextholderfilter" aria-label="Permalink to &quot;3.5SecurityContextHolderFilter&quot;">​</a></h3><p><code>SecurityContextHolderFilter</code>是第五个过滤器，直接继承自<code>GenericFilterBean</code>，声明了两个成员属性：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 请求之间持久化	 SecurityContext</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecurityContextRepository securityContextRepository;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 一种针对线程存储 SecurityContext 策略。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecurityContextHolderStrategy securityContextHolderStrategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecurityContextHolder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContextHolderStrategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>不难看出，该过滤器的作用就是将持久化的<code>SecurityContext</code>设置到当前线程中，比如登录成功后，在<code>HttpSession</code>中保存了<code>SecurityContext</code>，那么该过滤器可以直接将<code>SecurityContext</code>设置到请求线程中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1. 获取属性 SecurityContextHolderFilter.class.getName() + &quot;.APPLIED&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 存在说明当前请求已执行该过滤器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FILTER_APPLIED) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 2. 设置属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FILTER_APPLIED, Boolean.TRUE);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 3. 存储中加载 SecurityContext</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Supplier&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SecurityContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; deferredContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadDeferredContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 4. 将SecurityContext 设置到ContextHolder中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDeferredContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deferredContext);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 完成后，清理上下文，移除属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FILTER_APPLIED);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p><code>SecurityContextHolderFilter</code> 负责在请求处理过程中管理安全上下文。安全上下文是指存储了当前用户的认证信息（如身份、权限等）的对象，在整个请求处理过程中需要被使用。</p><p>具体来说，<code>SecurityContextHolderFilter</code> 主要完成以下几个任务：</p><ol><li>从请求中获取安全上下文：当请求到达后端应用程序时，<code>SecurityContextHolderFilter</code> 会尝试从请求中提取安全相关的信息，例如认证凭证、权限信息等。</li><li>将安全上下文与当前线程绑定：获取到安全上下文后，<code>SecurityContextHolderFilter</code> 会将其绑定到当前线程中。Spring Security 使用 <code>ThreadLocal</code> 来实现线程本地变量存储，确保在同一线程内安全上下文的传递。</li><li>允许在请求处理过程中访问安全上下文：一旦安全上下文与当前线程绑定成功，整个请求处理过程中的代码均可通过 <code>SecurityContextHolder</code> 来获取当前用户的安全信息，而无需显式地传递安全上下文。</li></ol><p>在典型的SpringSecurity 配置中，<code>SecurityContextHolderFilter</code> 通常作为过滤器链中的第一个过滤器，以确保在请求进入应用程序时，安全上下文已经准备就绪。</p><p>以下是一个简单的示例，展示了如何在<strong>SpringSecurity</strong> 中进行基本的配置，并演示了 <code>SecurityContextHolderFilter</code> 的使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecurityContextHolderFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), UsernamePasswordAuthenticationFilter.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>addFilterBefore</code> 方法将自定义的 <code>SecurityContextHolderFilter</code> 添加到了过滤器链中，以确保在请求进入应用程序时能够正确处理安全上下文。</p><p>总之，<code>SecurityContextHolderFilter</code> 在 Spring Security 中扮演着确保安全上下文正确传播和管理的重要角色，它是整个安全框架中的关键组成部分。通过合理地配置和使用 <code>SecurityContextHolderFilter</code>，可以确保安全上下文在请求处理过程中得到正确管理和传递，从而实现应用程序的安全防护。</p><h3 id="_3-6logoutfilter" tabindex="-1">3.6LogoutFilter <a class="header-anchor" href="#_3-6logoutfilter" aria-label="Permalink to &quot;3.6LogoutFilter&quot;">​</a></h3><p><code>LogoutFilter</code> 是 SpringSecurity 框架中的一个关键过滤器，用于处理用户注销（logout）操作。用户注销是指用户主动终止当前会话并退出登录状态的操作，而 <code>LogoutFilter</code> 负责在用户发起注销请求时执行相应的处理逻辑。</p><p>具体来说，<code>LogoutFilter</code> 主要完成以下几个任务：</p><ol><li>监听注销请求：当用户发起注销请求时，<code>LogoutFilter</code> 会拦截该请求，并进行相应的处理。通常情况下，注销请求会使用 HTTP 的 GET 或 POST 方法，并以特定的 URL 地址表示。</li><li>执行注销逻辑：一旦捕获到注销请求，<code>LogoutFilter</code> 将执行相应的注销逻辑，包括清除用户的认证信息、使当前会话失效、清空安全上下文等操作。</li><li>重定向或返回响应：在执行完注销逻辑后，<code>LogoutFilter</code> 可能会将用户重定向到指定的页面，或者直接返回注销成功的响应。</li></ol><p>在典型的 Spring Security 配置中，<code>LogoutFilter</code> 通常作为过滤器链中的最后一个过滤器，以确保在请求处理结束后能够正确处理用户的注销请求。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1. 查看当前请求路径是否登出，默认登出路径为/logout</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requiresLogout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 2. 获取线程中的认证信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			Authentication auth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAuthentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LogMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Logging out [%s]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, auth));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 3. 调用登出处理器处理</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, auth);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 4. 登出成功处理器，跳转到指定页面</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logoutSuccessHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onLogoutSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, auth);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>以下是一个简单的示例，展示了如何在 Spring Security 中进行基本的注销配置，并演示了 <code>LogoutFilter</code> 的使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logoutUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/custom-logout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义注销 URL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logoutSuccessUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/logout-success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注销成功后的跳转页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLogoutHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomLogoutHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加自定义的注销处理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidateHttpSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使当前会话失效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteCookies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JSESSIONID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除指定的 Cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.logout()</code> 方法配置了注销相关的信息，包括注销 URL、注销成功后的跳转页面、自定义的注销处理器、是否使当前会话失效以及需要删除的 Cookie 等。</p><p><code>LogoutFilter</code> 在 <strong>SpringSecurity</strong> 中扮演着处理用户注销请求的重要角色，它是实现用户注销功能的关键组成部分。通过合理地配置和使用 <code>LogoutFilter</code>，可以确保用户的注销操作得到正确处理，从而提升应用程序的用户体验和安全性。</p><h3 id="_3-7usernamepasswordauthenticationfilter" tabindex="-1">3.7UsernamePasswordAuthenticationFilter <a class="header-anchor" href="#_3-7usernamepasswordauthenticationfilter" aria-label="Permalink to &quot;3.7UsernamePasswordAuthenticationFilter&quot;">​</a></h3><p><code>UsernamePasswordAuthenticationFilter</code> 是 SpringSecurity 框架中的一个核心过滤器，用于处理基于用户名密码的身份认证请求。它是实现用户登录验证的关键组件之一，负责从用户提交的用户名密码信息进行认证，并在认证成功后生成相应的认证信息。</p><p>具体来说，<code>UsernamePasswordAuthenticationFilter</code> 主要完成以下几个任务：</p><ol><li>监听认证请求：当用户提交用户名密码等认证信息时，<code>UsernamePasswordAuthenticationFilter</code> 会拦截该请求，并进行身份认证处理。</li><li>提取认证信息：从用户提交的请求中提取用户名密码等身份认证信息。</li><li>执行认证逻辑：使用提取到的用户名密码信息进行实际的身份认证过程，通常包括验证用户名密码的正确性、获取用户的权限信息等操作。</li><li>认证成功：如果认证成功，<code>UsernamePasswordAuthenticationFilter</code> 将生成相应的认证信息，包括用户的主体（Principal）、权限信息等，并将其存储到安全上下文中。</li><li>认证失败：如果认证失败，<code>UsernamePasswordAuthenticationFilter</code> 可能会返回相应的认证失败信息，并阻止用户继续访问受保护的资源。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Authentication </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attemptAuthentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws AuthenticationException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1. 校验请求方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.postOnly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthenticationServiceException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authentication method not supported: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 2. 获取请求参数中的用户名、密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		String username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> obtainUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		String password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> obtainPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 3. 创建认证令牌</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		UsernamePasswordAuthenticationToken authRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UsernamePasswordAuthenticationToken.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unauthenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				password);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// Allow subclasses to set the &quot;details&quot; property</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		setDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, authRequest);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 4. 认证管理器进行认证</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAuthenticationManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authRequest);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>在<strong>SpringSecurity</strong> 配置中，<code>UsernamePasswordAuthenticationFilter</code> 被默认配置为过滤器链中的第一个过滤器，以确保在用户登录请求到达后端应用程序时能够正确处理身份认证逻辑。</p><p>以下是一个简单的示例，展示了如何在<strong>SpringSecurity</strong> 中进行基本的身份认证配置，并演示了 <code>UsernamePasswordAuthenticationFilter</code> 的使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loginPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义登录页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UsernamePasswordAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), UsernamePasswordAuthenticationFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.formLogin()</code> 方法配置了登录相关的信息，包括自定义的登录页面和允许所有用户访问登录页面。同时，我们通过 <code>addFilterBefore</code> 方法将自定义的 <code>UsernamePasswordAuthenticationFilter</code> 添加到了过滤器链中，以确保在请求进入应用程序时能够正确处理身份认证逻辑。</p><p><code>UsernamePasswordAuthenticationFilter</code> 在 Spring Security 中扮演着处理用户身份认证请求的重要角色，它是确保用户身份得到正确验证并生成相应认证信息的关键组件。通过合理地配置和使用 <code>UsernamePasswordAuthenticationFilter</code>，可以实现应用程序的安全认证功能，保护系统不受未经授权的访问。</p><h3 id="_3-8defaultloginpagegeneratingfilter" tabindex="-1">3.8DefaultLoginPageGeneratingFilter <a class="header-anchor" href="#_3-8defaultloginpagegeneratingfilter" aria-label="Permalink to &quot;3.8DefaultLoginPageGeneratingFilter&quot;">​</a></h3><p><code>DefaultLoginPageGeneratingFilter</code> 是 Spring Security框架中的一个过滤器，用于生成默认的登录页面。当应用程序需要用户登录但未配置自定义的登录页面时，<code>DefaultLoginPageGeneratingFilter</code> 将负责生成一个简单的默认登录页面，并在用户访问未授权资源时引导用户进行登录。</p><p>具体来说，<code>DefaultLoginPageGeneratingFilter</code> 主要完成以下几个任务：</p><ol><li>监听未授权请求：当用户尝试访问受保护的资源但未进行登录认证时，<code>DefaultLoginPageGeneratingFilter</code> 会拦截该请求，并进行处理。</li><li>生成默认登录页面：如果应用程序未配置自定义的登录页面，<code>DefaultLoginPageGeneratingFilter</code> 将生成一个简单的默认登录页面，包括用户名密码输入框、登录按钮等基本元素。</li><li>引导用户进行登录：将生成的默认登录页面返回给用户，以引导用户进行身份认证操作。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loginError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isErrorPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否登录错误 /login?error</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logoutSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isLogoutSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否登录成功 /login?logout</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLoginUrlRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loginError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logoutSuccess) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			//1.  /login?error、/login?logout、/login 三种请求URL中的任意一种会进入该方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			//2. 生成登录页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			String loginPageHtml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateLoginPageHtml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, loginError, logoutSuccess);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginPageHtml.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StandardCharsets.UTF_8).length);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			//3. 直接写出，并结束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginPageHtml);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>在典型的 SpringSecurity 配置中，<code>DefaultLoginPageGeneratingFilter</code> 通常作为过滤器链中的其中一个过滤器存在，以便在用户访问受保护资源但未进行登录认证时，能够正确生成默认的登录页面并引导用户进行登录操作。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202311072322540.png" alt="image-20231107232222152"></p><p>在<code>generateLoginPageHtml</code>方法中，我们可以看到直接使用字符串拼接了一个<code>HTML</code>登录页面，也就是我们最开始引入SpringSecurity依赖之后的那个默认登录页面。</p><p>下面通过一个示例，展示了如何在SpringSecurity 中进行基本的身份认证配置，并演示了 <code>DefaultLoginPageGeneratingFilter</code> 的使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultLoginPageGeneratingFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), UsernamePasswordAuthenticationFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.formLogin()</code> 方法配置了登录相关的信息，但未指定自定义的登录页面，因此 <code>DefaultLoginPageGeneratingFilter</code> 将会被触发以生成默认的登录页面。同时，我们通过 <code>addFilterBefore</code> 方法将 <code>DefaultLoginPageGeneratingFilter</code> 添加到了过滤器链中。</p><p><code>DefaultLoginPageGeneratingFilter</code> 在 Spring Security 中起着生成默认登录页面，引导用户进行登录的重要作用。当应用程序需要一个简单的登录页面来引导用户进行身份认证时，可以借助 <code>DefaultLoginPageGeneratingFilter</code> 来快速实现这一功能，从而提升系统的用户友好性和安全性。</p><h3 id="_3-9defaultlogoutpagegeneratingfilter" tabindex="-1">3.9DefaultLogoutPageGeneratingFilter <a class="header-anchor" href="#_3-9defaultlogoutpagegeneratingfilter" aria-label="Permalink to &quot;3.9DefaultLogoutPageGeneratingFilter&quot;">​</a></h3><p><code>DefaultLogoutPageGeneratingFilter</code>和上面一样，如果请求<code>URL</code>是<code>/logout</code>，直接生成一个确认退出页面。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202311072326953.png" alt="image-20231107232600856"></p><h3 id="_3-10basicauthenticationfilter" tabindex="-1">3.10BasicAuthenticationFilter <a class="header-anchor" href="#_3-10basicauthenticationfilter" aria-label="Permalink to &quot;3.10BasicAuthenticationFilter&quot;">​</a></h3><p><code>BasicAuthenticationFilter</code>处理<code>BASIC</code>认证（请求头中携带<code>BASIC</code> +特殊格式用户名密码），除表单登录的另一种登录方式，但是目前用的很少，和表单登录逻辑类似：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilterInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			UsernamePasswordAuthenticationToken authRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.authenticationConverter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (authRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Did not process authentication request since failed to find &quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">						+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;username and password in Basic Authorization header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			String username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LogMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Found username &#39;%s&#39; in Basic Authorization header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, username));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticationIsRequired</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				Authentication authResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.authenticationManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authRequest);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				SecurityContext context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createEmptyContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAuthentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authResult);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">					this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LogMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Set SecurityContextHolder to %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, authResult));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rememberMeServices.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loginSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, authResult);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, request, response);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				onSuccessfulAuthentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, authResult);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (AuthenticationException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to process authentication request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rememberMeServices.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loginFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			onUnsuccessfulAuthentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, ex);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ignoreFailure) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.authenticationEntryPoint.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>具体来说，<code>BasicAuthenticationFilter</code> 主要完成以下几个任务：</p><ol><li>提取认证信息：在每个请求处理之前，<code>BasicAuthenticationFilter</code> 会从请求头中提取 Base64 编码的用户名和密码信息，用于后续的身份验证。</li><li>执行身份验证：<code>BasicAuthenticationFilter</code> 会将提取到的用户名和密码信息传递给认证管理器（AuthenticationManager），由认证管理器来进行实际的身份验证操作。</li><li>处理身份验证结果：根据身份验证的结果，<code>BasicAuthenticationFilter</code> 会在安全上下文中设置相应的认证信息，并根据认证结果决定是否允许请求继续处理。</li><li>错误处理：当身份验证失败时，<code>BasicAuthenticationFilter</code> 负责返回适当的身份验证失败响应，要求客户端重新发起身份验证。</li></ol><p>通过合理配置 <code>BasicAuthenticationFilter</code>，可以实现对基本认证的请求进行身份验证，并根据验证结果决定是否允许请求继续处理。</p><p>以下是一个简单的示例，展示了如何在 <strong>SpringSecurity</strong> 中配置 <code>BasicAuthenticationFilter</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // ... 其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestCacheAwareFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), UsernamePasswordAuthenticationFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.addFilterBefore(new BasicAuthenticationFilter(authenticationManager()), UsernamePasswordAuthenticationFilter.class)</code> 将 <code>BasicAuthenticationFilter</code> 添加到了过滤器链中，并传入了认证管理器以进行实际的身份验证操作。</p><p><code>BasicAuthenticationFilter</code> 在 Spring Security 中扮演着处理基本认证相关逻辑的重要角色，通过它的配置可以实现对基本认证的请求进行身份验证，提高系统的安全性和访问控制能力。</p><h3 id="_3-11requestcacheawarefilter" tabindex="-1">3.11RequestCacheAwareFilter <a class="header-anchor" href="#_3-11requestcacheawarefilter" aria-label="Permalink to &quot;3.11RequestCacheAwareFilter&quot;">​</a></h3><p><code>RequestCacheAwareFilter</code>缓存被登录打断的请求，例如访问某个<code>URL</code>，会调转到登录页面，登录成功后，会从当前缓存中获取之前访问的<code>URL</code>，直接跳转到原来的请求：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1. 获取缓存请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		HttpServletRequest wrappedSavedRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.requestCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatchingRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((HttpServletRequest) request,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				(HttpServletResponse) response);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 2. 存在则传递之前缓存的请求对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((wrappedSavedRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrappedSavedRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>具体来说，<code>RequestCacheAwareFilter</code> 主要完成以下几个任务：</p><ol><li>请求缓存：在用户完成身份验证前，<code>RequestCacheAwareFilter</code> 会将原始的请求信息保存到请求缓存中，这样用户完成身份验证后就可以获取到这些原始请求信息。</li><li>请求信息的恢复：当用户完成身份验证后，<code>RequestCacheAwareFilter</code> 会根据请求缓存中的信息，将用户原始的请求信息（如请求 URL、请求参数等）恢复，从而让用户能够继续之前被中断的请求处理流程。</li><li>与其他安全组件的协作：<code>RequestCacheAwareFilter</code> 通常与其他安全组件（如身份验证过滤器、访问控制过滤器等）协同工作，确保在用户完成身份验证后能够正确地恢复原始的请求信息。</li></ol><p>通过合理配置 <code>RequestCacheAwareFilter</code>，可以实现用户完成身份验证后能够无缝地继续之前的请求处理流程，提高系统的用户体验和功能完整性。</p><p>以下是一个简单的示例，展示了如何在 <strong>SpringSecurity</strong> 中配置 <code>RequestCacheAwareFilter</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // ... 其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestCacheAwareFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), UsernamePasswordAuthenticationFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.addFilterBefore(new RequestCacheAwareFilter(), UsernamePasswordAuthenticationFilter.class)</code> 将 <code>RequestCacheAwareFilter</code> 添加到了过滤器链中。</p><p><code>RequestCacheAwareFilter</code> 在 Spring Security 中扮演着保存和恢复用户原始请求信息的重要角色，通过它的配置可以实现用户完成身份验证后能够无缝地继续之前的请求处理流程，提高系统的用户体验和功能完整性。</p><h3 id="_3-12securitycontextholderawarerequestfilter" tabindex="-1">3.12SecurityContextHolderAwareRequestFilter <a class="header-anchor" href="#_3-12securitycontextholderawarerequestfilter" aria-label="Permalink to &quot;3.12SecurityContextHolderAwareRequestFilter&quot;">​</a></h3><p><code>SecurityContextHolderAwareRequestFilter</code> 将请求包装为<code>Servlet3SecurityContextHolderAwareRequestWrapper</code>：</p><p>具体来说，<code>SecurityContextHolderAwareRequestFilter</code> 主要完成以下几个任务：</p><ol><li>将安全上下文信息与请求关联：在每个请求处理之前，<code>SecurityContextHolderAwareRequestFilter</code> 会将当前的安全上下文信息绑定到当前的 HTTP 请求上下文中，这样在请求处理过程中可以方便地获取和操作安全上下文信息。</li><li>提供方便的安全上下文访问方式：通过 <code>SecurityContextHolderAwareRequestFilter</code>，可以在请求处理过程中以一种方便的方式获取当前的认证信息、权限信息等安全上下文相关的信息，而不需要显式地从 <code>SecurityContextHolder</code> 中获取。</li><li>与其他安全组件的协作：<code>SecurityContextHolderAwareRequestFilter</code> 通常与其他安全组件（如身份验证过滤器、访问控制过滤器等）协同工作，确保安全上下文信息能够在整个请求处理过程中得到正确的传递和使用。</li></ol><p>通过合理配置 <code>SecurityContextHolderAwareRequestFilter</code>，可以实现安全上下文信息与 HTTP 请求的有效关联，提高系统对安全信息的处理效率和便利性。</p><p>以下是一个简单的示例，展示了如何在 <strong>SpringSecurity</strong> 中配置 <code>SecurityContextHolderAwareRequestFilter</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // ... 其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecurityContextHolderAwareRequestFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), UsernamePasswordAuthenticationFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.addFilterBefore(new SecurityContextHolderAwareRequestFilter(), UsernamePasswordAuthenticationFilter.class)</code> 将 <code>SecurityContextHolderAwareRequestFilter</code> 添加到了过滤器链中。</p><p>总之，<code>SecurityContextHolderAwareRequestFilter</code> 在 Spring Security 中扮演着将安全上下文信息与 HTTP 请求关联的重要角色，通过它的配置可以实现在请求处理过程中方便地获取和操作安全上下文信息，提高系统的安全性和开发效率。</p><h3 id="_3-13anonymousauthenticationfilter" tabindex="-1">3.13AnonymousAuthenticationFilter <a class="header-anchor" href="#_3-13anonymousauthenticationfilter" aria-label="Permalink to &quot;3.13AnonymousAuthenticationFilter&quot;">​</a></h3><p><code>Anonymous</code>是匿名用户的意思，当之前的过滤器没有发现认证的用户信息时，会在<code>AnonymousAuthenticationFilter</code>过滤器中创建一个匿名用户：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Supplier&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SecurityContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; deferredContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeferredContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrateg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDeferredContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultWithAnonymous</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((HttpServletRequest) req, deferredContext));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>这个匿名身份信息允许匿名用户在系统中进行一定程度的操作，比如访问公开的资源或进行有限制的操作。</p><p>具体来说，<code>AnonymousAuthenticationFilter</code> 主要完成以下几个任务：</p><ol><li>匿名身份的创建：当用户尚未进行认证时，<code>AnonymousAuthenticationFilter</code> 负责创建一个匿名的身份信息，并将其绑定到当前的安全上下文中。</li><li>安全上下文的维护：<code>AnonymousAuthenticationFilter</code> 将负责维护当前请求的安全上下文，确保匿名用户在系统中能够得到适当的处理和权限控制。</li><li>与其他身份验证过滤器的协作：<code>AnonymousAuthenticationFilter</code> 通常与其他身份验证过滤器（比如表单登录过滤器、基本认证过滤器等）协同工作，确保在用户未进行认证时能够创建并使用匿名身份信息。</li></ol><p>通过合理配置 <code>AnonymousAuthenticationFilter</code>，可以实现对匿名用户的安全管理，确保他们在系统中的合法操作不影响系统的安全性。</p><p>以下是一个简单的示例，展示了如何在 Spring Security 中配置 <code>AnonymousAuthenticationFilter</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">antMatchers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/public/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnonymousAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anonymousUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), UsernamePasswordAuthenticationFilter.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.antMatchers(&quot;/public/**&quot;).permitAll()</code> 配置了对 <code>/public/**</code> 路径下的资源的公开访问权限，并通过 <code>AnonymousAuthenticationFilter</code> 创建了一个名为 <code>anonymousUser</code> 的匿名身份信息，并将其添加到了过滤器链中。</p><p><code>AnonymousAuthenticationFilter</code> 在 Spring Security 中扮演着为匿名用户创建身份信息的重要角色，通过它的配置可以有效管理匿名用户在系统中的操作和权限，从而提高系统的安全性和用户体验。</p><h3 id="_3-14exceptiontranslationfilter" tabindex="-1">3.14ExceptionTranslationFilter <a class="header-anchor" href="#_3-14exceptiontranslationfilter" aria-label="Permalink to &quot;3.14ExceptionTranslationFilter&quot;">​</a></h3><p><code>ExceptionTranslationFilter</code>是比较重要的一个过滤器，对异常进行转换处理，处理过滤器中的抛出<code>AccessDeniedException</code>、<code>AuthenticationException</code>，提供了<code>Java</code>异常和<code>HTTP</code>响应之间的桥梁。</p><p>具体来说，<code>ExceptionTranslationFilter</code> 主要完成以下几个任务：</p><ol><li>异常转换：当发生安全相关的异常，比如用户未认证、无权限访问等情况时，<code>ExceptionTranslationFilter</code> 将负责将这些异常转换为特定的响应，比如跳转到登录页面、返回拒绝访问的错误信息等。</li><li>异常处理：针对不同的安全异常，<code>ExceptionTranslationFilter</code> 可以配置相应的异常处理策略，比如跳转到特定页面、返回特定的错误码等。</li><li>与其他过滤器的协作：<code>ExceptionTranslationFilter</code> 通常与其他安全过滤器（比如身份验证过滤器、访问控制过滤器等）协同工作，确保在安全相关的异常发生时能够得到正确处理。</li></ol><p>通过合理配置 <code>ExceptionTranslationFilter</code>，可以实现对安全异常的统一处理，提高系统的安全性和用户体验。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 1. 尝试从堆栈中提取 SpringSecurity异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// Try to extract a SpringSecurityException from the stacktrace</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] causeChain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.throwableAnalyzer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">determineCauseChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 2. 分析异常是否 AuthenticationException</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			RuntimeException securityException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (AuthenticationException) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.throwableAnalyzer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFirstThrowableOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AuthenticationException.class, causeChain);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 3. 没有AuthenticationException,则获取AccessDeniedException</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (securityException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				securityException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (AccessDeniedException) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.throwableAnalyzer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFirstThrowableOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AccessDeniedException.class, causeChain);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 4. 不是AuthenticationException、AccessDeniedException直接抛出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (securityException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				rethrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isCommitted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unable to handle the Spring Security Exception &quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">						+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;because the response is already committed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 5. 处理异常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			handleSpringSecurityException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, chain, securityException);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>以下是一个简单的示例，展示了如何在 <strong>SpringSecurity</strong> 中配置 <code>ExceptionTranslationFilter</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exceptionHandling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accessDeniedPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/403&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置访问拒绝时的页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExceptionTranslationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), FilterSecurityInterceptor.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个配置中，我们通过 <code>.exceptionHandling()</code> 方法配置了访问拒绝时的处理策略，并将 <code>ExceptionTranslationFilter</code> 添加到了过滤器链中。</p><p><code>ExceptionTranslationFilter</code> 在 Spring Security 中扮演着统一处理安全异常的重要角色，通过它的配置可以实现对各种安全异常的统一处理和响应定制，从而提升系统的安全性和用户体验。</p><h3 id="_3-15authorizationfilter" tabindex="-1">3.15AuthorizationFilter <a class="header-anchor" href="#_3-15authorizationfilter" aria-label="Permalink to &quot;3.15AuthorizationFilter&quot;">​</a></h3><p><strong>AuthorizationFilter</strong>是我们介绍的最后一个过滤器，<code>Authorization</code>是授权的意思，就是用来检验我们当前的请求是否具有相应的权限。</p><p><code>AuthorizationFilter</code> 并不是一个内置的类或过滤器。也许您在问的是 <code>AuthorizationFilter</code> 的概念或者类似的功能。一般来说，在 Spring Security 中实现权限控制的过滤器是 <code>FilterSecurityInterceptor</code>。</p><p><code>FilterSecurityInterceptor</code> 是 Spring Security 中负责进行访问控制的过滤器之一，它主要用于对请求进行权限验证和访问控制。当用户发送请求时，<code>FilterSecurityInterceptor</code>会拦截该请求，并执行以下任务：</p><ol><li>权限验证：根据请求的路径和用户的权限信息，判断用户是否具有访问该资源的权限。</li><li>访问控制决策：根据配置的权限控制规则，决定是否允许用户访问请求的资源。</li><li>异常处理：在权限验证失败或访问被拒绝时，<code>FilterSecurityInterceptor</code> 负责抛出相应的异常或执行其他定义的异常处理逻辑。</li></ol><p>通过合理配置 <code>FilterSecurityInterceptor</code>，可以实现对系统中各种资源的权限控制，确保只有具有相应权限的用户才能访问特定的功能或数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        HttpServletRequest request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (HttpServletRequest)servletRequest;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        HttpServletResponse response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (HttpServletResponse)servletResponse;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 如果设置了监控每一次请求，并且当前过滤器已经执行，则直接跳过</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.observeOncePerRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isApplied</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">skipDispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        	// 2. 如果是访问错误页面，则直接跳过</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 3. 设置已执行当前过滤器 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// org.springframework.security.web.access.intercept.AuthorizationFilter@5707f613.APPLIED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            String alreadyFilteredAttributeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAlreadyFilteredAttributeName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alreadyFilteredAttributeName, Boolean.TRUE);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            	// 4. 调用AuthorizationManager 检查当前是否有权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                AuthorizationDecision decision </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.authorizationManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getAuthentication, request);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 5. 发布授权事件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.eventPublisher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publishAuthorizationEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getAuthentication, request, decision);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 6. 如果未被授权，抛出 AccessDeniedException</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (decision </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decision.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isGranted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccessDeniedException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access Denied&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alreadyFilteredAttributeName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="_4-流程分析" tabindex="-1">4.流程分析 <a class="header-anchor" href="#_4-流程分析" aria-label="Permalink to &quot;4.流程分析&quot;">​</a></h2><p>上面我们介绍了这么多的过滤器以及进行了简单的分析，但是还有一个问题我们需要注意，既然项目启动初始化后会初识化这些过滤器，那么是谁来进行执行调度他们呢？</p><p>之前我们了解过<code>FilterChainProxy </code>是 <code>SpringSecurity </code>使用的核心，用于代理<code>SpringSecurity</code>中所有的<code>SecurityFilterChain </code>，本质上是一个特殊的过滤器，通过<code>DelegatingFilterProxy </code>进行代理。</p><p><code>FilterChainProxy</code>继承自<code>GenericFilterBean</code>类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FilterChainProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecurityFilterChain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterChains) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // 上下文持有者（当前认证主体一些信息）策略，默认：ThreadLocal</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.securityContextHolderStrategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecurityContextHolder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContextHolderStrategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // 过滤器链校验</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.filterChainValidator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NullFilterChainValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // Http防火墙</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.firewall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StrictHttpFirewall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // 请求被拒绝处理程序</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.requestRejectedHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpStatusRequestRejectedHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // 异常解析器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.throwableAnalyzer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThrowableAnalyzer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // 虚拟的过滤器链装饰器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.filterChainDecorator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VirtualFilterChainDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // Security 过滤器链集合，默认只有一个DefaultSecurityFilterChain</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.filterChains </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterChains;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>那么他们的整个的<strong>执行流程</strong>是怎么样的呢，我们来简单分析一下。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202311080959111.png" alt="image-20231108095916877"></p><p>在<code>doFilterInternal</code>方法中<code>Spring Security </code>防火墙会进行第一步请求校验：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilterInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1. 防火墙校验，将请求和响应进行包装</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1.1 请求方式是否被允许</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1.2 URL 是否规范</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1.3 远程IP是否黑名单</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1.4 拒绝字段名称中的不可打印Ascii字符</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1.5 请求对象是否规范</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		FirewalledRequest firewallRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.firewall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFirewalledRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((HttpServletRequest) request);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		HttpServletResponse firewallResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.firewall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFirewalledResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((HttpServletResponse) response);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 取出所有过滤器链中的所有过滤器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; filters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFilters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firewallRequest);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		FilterChain reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (req, res) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LogMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Secured &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firewallRequest)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// Deactivate path stripping as we exit the security filter chain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			firewallRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 对过滤器链进行装饰，并调用装饰类的doFilter 方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.filterChainDecorator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decorate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reset, filters).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firewallRequest, firewallResponse);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>在装饰过滤器链<code>VirtualFilterChain</code>中，开始正式调用<code>Spring Security </code>中的过滤器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRequest request, ServletResponse response) throws IOException, ServletException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 1. 当前被调用过滤器的位置（初始值为0）是否等于过滤器数量（默认15）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.currentPosition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.size) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				// 位置变为过滤器数量大小时，说明全部执行完毕，调用过滤器链执行过滤器（不再是Spring Security 中的过滤器了）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.originalChain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 2. 位置加1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.currentPosition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 3. 获取当前过滤器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			Filter nextFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.additionalFilters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.currentPosition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTraceEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				String name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextFilter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSimpleName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LogMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invoking %s (%d/%d)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.currentPosition, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.size));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 4. 执行过滤器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			nextFilter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span></code></pre></div><p>可以看到，<code>SpringSecurity </code>中的过滤器执行，是严格按照顺序被调用的。每个过滤器有序执行，完成各自的功能，所有的过滤器都通过后，进入<code>Servlet</code>，控制层接收到请求进行业务逻辑处理，最终响应对象又经过每一个过滤器，返回给客户端。</p><h2 id="_5-参考文献" tabindex="-1">5.参考文献 <a class="header-anchor" href="#_5-参考文献" aria-label="Permalink to &quot;5.参考文献&quot;">​</a></h2><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Spring%20Security%20%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AE%9E%E6%93%8D/08%20%20%E7%AE%A1%E9%81%93%E8%BF%87%E6%BB%A4%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8E%20Spring%20Security%20%E8%BF%87%E6%BB%A4%E5%99%A8%E6%89%A9%E5%B1%95%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%9F.md" target="_blank" rel="noreferrer">https://learn.lianglianglee.com/专栏/Spring Security 详解与实操/08 管道过滤：如何基于 Spring Security 过滤器扩展安全性？.md</a></li><li><a href="https://www.processon.com/diagraming/6547a0f554338f0b199d353c" target="_blank" rel="noreferrer">https://www.processon.com/diagraming/6547a0f554338f0b199d353c</a></li><li><a href="https://springdoc.cn/spring-security/servlet/architecture.html" target="_blank" rel="noreferrer">https://springdoc.cn/spring-security/servlet/architecture.html</a></li></ul><h2 id="_6-总结" tabindex="-1">6.总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6.总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>`,185)]))}const o=i(e,[["render",l]]);export{g as __pageData,o as default};
