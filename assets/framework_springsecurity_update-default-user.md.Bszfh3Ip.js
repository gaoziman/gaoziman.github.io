import{_ as e,B as n,o as t,c as p,j as a,a as r,G as l,a8 as o}from"./chunks/framework.D0fTRY1a.js";const E=JSON.parse('{"title":"SpringSecurity6 | 修改默认用户","description":"","frontmatter":{},"headers":[],"relativePath":"framework/springsecurity/update-default-user.md","filePath":"framework/springsecurity/update-default-user.md","lastUpdated":null}'),h={name:"framework/springsecurity/update-default-user.md"};function c(g,s,d,k,u,m){const i=n("ArticleMetadata");return t(),p("div",null,[s[0]||(s[0]=a("h1",{id:"springsecurity6-修改默认用户",tabindex:"-1"},[r("SpringSecurity6 | 修改默认用户 "),a("a",{class:"header-anchor",href:"#springsecurity6-修改默认用户","aria-label":'Permalink to "SpringSecurity6 | 修改默认用户"'},"​")],-1)),l(i),s[1]||(s[1]=o(`<p>学习参考 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071947999.png" alt="image-20231030235443828" loading="lazy"></p><h2 id="_1-前言" tabindex="-1">1.前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1.前言&quot;">​</a></h2><p>大家好，我是Leo哥🫣🫣🫣，接到<a href="https://gaoziman.blog.csdn.net/article/details/134816835" target="_blank" rel="noreferrer">上一节</a>，我们学习了SpringSecurity默认登录用户是如何来的，也通过源码的方式去走了下整个流程。虽然通过SpringSecurity自带的用户和密码密码可以让我们进行登录并访问到我们的接口，但是你每次项目重启，系统所生成的UUID都不一样，这样会不会太麻烦了。能不能通过手动配置的方式来进行配置自定义用户的密码呢。当然可以，下面Leo哥带你通过配置文件来对他进行自定义配置。好了，话不多说让我们开始吧😎😎😎。</p><h2 id="_2-自定义配置" tabindex="-1">2.自定义配置 <a class="header-anchor" href="#_2-自定义配置" aria-label="Permalink to &quot;2.自定义配置&quot;">​</a></h2><p>我们可以在 application.properties 中配置默认的用户名密码。</p><p>怎么配置呢？大家还记得上一小节我们说的 SecurityProperties，默认的用户就定义在它里边，是一个静态内部类，我们如果要定义自己的用户名密码，必然是要去覆盖默认配置，我们先来看下 SecurityProperties 的定义：</p><p>那么<strong>SecurityProperties</strong> 是怎么来的呢，当我们项目启动的时候，SpringBoot就会通过自动配置进行加载SpringSecurity所需要的一些bean。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071952676.png" alt="image-20231207195201598" loading="lazy"></p><p>我们可以在文件中找到关于SpringSecurity相关的自动配置类：<strong>SecurityAutoConfiguration</strong></p><p>然后我们可以点过去看看他的具体实现。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071953015.png" alt="image-20231207195305951" loading="lazy"></p><p>可以看到在这个自动配置类上有一个我们熟悉的注解：<code>@EnableConfigurationProperties</code>，他会去加载SecurityProperties.class。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071954051.png" alt="image-20231207195454972" loading="lazy"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071955522.png" alt="image-20231207195519488" loading="lazy"></p><p>这一下不就串上了嘛，上节课我们学习了关于SecurityProperties，当我们并没有指定用户的时候，他就会使用默认配置，默认用户名为user，密码为随机生成的UUID。</p><p>那么我们现在就可以通过spring.security配置文件进行自定义我们的用户名和密码。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071956518.png" alt="image-20231207195644467" loading="lazy"></p><p>这就是我们新定义的用户名密码。</p><p>在 properties 中定义的用户名密码最终是通过set 方法注入到属性中去的，这里我们顺便来看下 SecurityProperties.User#setPassword 方法:</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String password) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StringUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.passwordGenerated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> password;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>从这里我们可以看到，application.yml 中定义的密码在注入进来之后，还顺便设置了 passwordGenerated 属性为 false，这个属性设置为 false 之后，控制台就不会打印默认的密码了。</p><p>最后，我们重新启动项目，注意这次看控制台就没有原来生成的UUID生成的密码了，因为我们没有使用默认配置。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071958068.png" alt="image-20231207195833998" loading="lazy"></p><p>然后通过自定义的用户名和密码进行登录。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312071959732.png" alt="image-20231207195926697" loading="lazy"></p><p>发现也是可以正常进行登录的。</p><h2 id="_3-总结" tabindex="-1">3.总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3.总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>`,30))])}const b=e(h,[["render",c]]);export{E as __pageData,b as default};
