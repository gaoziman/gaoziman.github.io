import{_ as t,B as c,o as d,c as r,j as a,a as l,G as n,a8 as s}from"./chunks/framework.D0fTRY1a.js";const f=JSON.parse('{"title":"介绍一下Java的数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"interview/basic/java-all-types.md","filePath":"interview/basic/java-all-types.md","lastUpdated":null}'),i={name:"interview/basic/java-all-types.md"};function p(h,e,_,b,u,m){const o=c("ArticleMetadata");return d(),r("div",null,[e[0]||(e[0]=a("h1",{id:"介绍一下java的数据类型",tabindex:"-1"},[l("介绍一下Java的数据类型 "),a("a",{class:"header-anchor",href:"#介绍一下java的数据类型","aria-label":'Permalink to "介绍一下Java的数据类型"'},"​")],-1)),n(o),e[1]||(e[1]=s('<p>Java的数据类型分为基本数据类型和引用数据类型。</p><p>基本数据类型包括 <strong>byte、char、boolean、short、int、long、float、double。</strong></p><p>其中整数的默认类型为int类型，浮点数的默认类型为double。</p><h2 id="_1-整数类型" tabindex="-1">1.整数类型 <a class="header-anchor" href="#_1-整数类型" aria-label="Permalink to &quot;1.整数类型&quot;">​</a></h2><p><code>byte</code>：-128~127</p><p><code>short</code>：-32768~32767</p><p><code>int</code>：-2^31~2^31-1</p><p><code>long</code>：-2^63~2^63-1</p><h2 id="_2-浮点类型" tabindex="-1">2.浮点类型 <a class="header-anchor" href="#_2-浮点类型" aria-label="Permalink to &quot;2.浮点类型&quot;">​</a></h2><p><code>float</code>：约等于3.402823e+38~1.401298e-45</p><p><code>double</code>：约等于1.797693e+308~4.9000000e-324</p><h2 id="_3-字符类型-仅有一个成员-即char-用于表示单个字符。" tabindex="-1">3.字符类型：仅有一个成员，即<code>char</code>，用于表示单个字符。 <a class="header-anchor" href="#_3-字符类型-仅有一个成员-即char-用于表示单个字符。" aria-label="Permalink to &quot;3.字符类型：仅有一个成员，即`char`，用于表示单个字符。&quot;">​</a></h2><h2 id="_4-布尔类型-只有boolean一种-用于表示真伪状态。" tabindex="-1">4.布尔类型：只有<code>boolean</code>一种，用于表示真伪状态。 <a class="header-anchor" href="#_4-布尔类型-只有boolean一种-用于表示真伪状态。" aria-label="Permalink to &quot;4.布尔类型：只有`boolean`一种，用于表示真伪状态。&quot;">​</a></h2><p>还有一种特殊的类型<code>void</code>，它是所有其他基本类型的公共父类。</p><p>每个基本类型都有相应的包装类，如<code>Integer</code>代表<code>int</code>，<code>Float</code>代表<code>float</code>，<code>Double</code>代表<code>double</code>，<code>Boolean</code>代表<code>boolean</code>，<code>Byte</code>代表<code>byte</code>，<code>Short</code>代表<code>short</code>，<code>Long</code>代表<code>long</code>。这些包装类提供了额外的功能和便利，例如自动转换和强制转换等功能。</p><p><strong>引用数据类型包括：类类型、接口类型、数组类型、枚举类型等。</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202404021100920.png" alt="img" loading="lazy"></p>',17))])}const g=t(i,[["render",p]]);export{f as __pageData,g as default};
