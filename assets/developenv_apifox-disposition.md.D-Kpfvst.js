import{_ as e,B as n,o as t,c as l,j as o,a as s,G as p,a8 as c}from"./chunks/framework.D0fTRY1a.js";const A=JSON.parse('{"title":"Apifox图文使用教程","description":"","frontmatter":{"title":"Apifox图文使用教程","lastUpdated":true},"headers":[],"relativePath":"developenv/apifox-disposition.md","filePath":"developenv/apifox-disposition.md","lastUpdated":null}'),r={name:"developenv/apifox-disposition.md"};function g(h,a,d,m,u,f){const i=n("ArticleMetadata");return t(),l("div",null,[a[0]||(a[0]=o("h1",{id:"apifox图文使用教程",tabindex:"-1"},[s("Apifox图文使用教程 "),o("a",{class:"header-anchor",href:"#apifox图文使用教程","aria-label":'Permalink to "Apifox图文使用教程"'},"​")],-1)),p(i),a[1]||(a[1]=c('<h2 id="_1-前言☕" tabindex="-1">1.前言☕ <a class="header-anchor" href="#_1-前言☕" aria-label="Permalink to &quot;1.前言☕&quot;">​</a></h2><p>大家好，我是Leo哥🫣🫣🫣，本期专栏带来一些开发中一些好用的工具，以及教大家如何去 <code>使用</code>，这一期带来的是当前最流行的API文档测试工具---<strong>Apifox</strong>。好了，话不多说让我们开始吧😎😎😎。</p><h2 id="_2-概述" tabindex="-1">2.概述 <a class="header-anchor" href="#_2-概述" aria-label="Permalink to &quot;2.概述&quot;">​</a></h2><h3 id="_2-1-什么是apifox" tabindex="-1">2.1 什么是Apifox <a class="header-anchor" href="#_2-1-什么是apifox" aria-label="Permalink to &quot;2.1 什么是Apifox&quot;">​</a></h3><p><a href="https://apifox.com/" target="_blank" rel="noreferrer">Apifox</a> 是集 API 文档、API 调试、API Mock、API 自动化测试多项实用功能为一体的 API 管理平台，定位为 <code>Postman + Swagger + Mock + JMeter</code>。旨在通过一套系统、一份数据，解决多个工具之间的数据同步问题。只需在 Apifox 中定义 API 文档；API 调试、API 数据 Mock、API 自动化测试等功能就可以直接使用，无需再次定义。API 文档和 API 开发调试流程在同一个工具内闭环，API 调试完成后即可确保与 API 文档定义完全一致。高效、及时、准确！🔥🔥🔥</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041136039.png" alt="image-20240104113626978" loading="lazy"></p><ol><li>使用 Swagger 管理 API 文档</li><li>使用 Postman 调试 API</li><li>使用 mockjs 等工具 Mock API 数据</li><li>使用 JMeter 做 API 自动化测试</li></ol><h3 id="_2-2-apifox有哪些功能" tabindex="-1">2.2 Apifox有哪些功能 <a class="header-anchor" href="#_2-2-apifox有哪些功能" aria-label="Permalink to &quot;2.2 Apifox有哪些功能&quot;">​</a></h3><ol><li><strong>接口设计</strong>：Apifox 接口文档遵循 <a href="https://www.openapis.org/" target="_blank" rel="noreferrer">OpenApi</a> 3.0 (原 Swagger)、<a href="https://json-schema.org/" target="_blank" rel="noreferrer">JSON Schema</a> 规范的同时，提供了非常好用的<code>可视化</code>文档管理功能，零学习成本，非常高效。并且支持在线分享接口文档。</li><li><strong>数据模型</strong>：可复用的数据结构，定义接口<code>返回数据结构</code>及<code>请求参数数据结构</code>（仅 JSON 和 XML 模式）时可直接引用。支持模型直接嵌套引用，直接 JSON/XML 智能导入，支持 oneOf、allOf 等高级组合模式。</li><li><strong>接口调试</strong>：Postman 有的功能，比如环境变量、前置/后置脚本、Cookie/Session 全局共享 等功能，Apifox 都有，并且比 Postman 更高效好用。接口运行完之后点击<code>保存为用例</code>按钮，即可生成<code>接口用例</code>，后续可直接运行接口用例，无需再输入参数，非常方便。自定义脚本 100% 兼容 Postman 语法，并且支持运行 javascript、java、python、php、js、BeanShell、go、shell、ruby、lua 等各种语言代码。</li><li><strong>接口用例</strong>：通常一个接口会有多种情况用例，比如<code>参数正确</code>用例、<code>参数错误</code>用例、<code>数据为空</code>用例、<code>不同数据状态</code>用例等等。运行接口用例时会自动校验数据正确性，用接口用例来调试接口非常高效。</li><li><strong>接口数据 Mock</strong>：内置 <a href="http://mockjs.com/" target="_blank" rel="noreferrer">Mock.js</a> 规则引擎，非常方便 mock 出各种数据，并且可以在定义数据结构的同时写好 mock 规则。支持添加“期望”，根据请求参数返回不同 mock 数据。最重要的是 Apifox <code>零配置</code> 即可 Mock 出非常人性化的数据，具体在本文后面介绍。</li><li><strong>数据库操作</strong>：支持读取数据库数据，作为接口请求参数使用。支持读取数据库数据，用来校验(断言)接口请求是否成功。</li><li><strong>接口自动化测试</strong>：提供接口集合测试，可以通过选择接口（或接口用例）快速创建测试集。目前接口自动化测试更多功能还在开发中，敬请期待！目标是： JMeter 有的功能基本都会有，并且要更好用。</li><li><strong>快捷请求</strong>：类似 Postman 的接口调试方式，主要用途为临时调试一些<code>无需文档化</code>的接口，无需提前定义接口即可快速调试。</li><li><strong>代码生成</strong>：根据接口及数据数据模型定义，系统自动生成<code>接口请求代码</code>、<code>前端业务代码</code>及<code>后端业务代码</code>。</li><li><strong>团队协作</strong>：Apifox 天生就是为团队协作而生的，接口云端实时同步更新，成熟的<code>团队/项目/成员权限</code>管理，满足各类企业的需求。</li></ol><h2 id="_3-apifox的基本使用" tabindex="-1">3.Apifox的基本使用 <a class="header-anchor" href="#_3-apifox的基本使用" aria-label="Permalink to &quot;3.Apifox的基本使用&quot;">​</a></h2><h3 id="_3-1-大体结构" tabindex="-1">3.1 大体结构 <a class="header-anchor" href="#_3-1-大体结构" aria-label="Permalink to &quot;3.1 大体结构&quot;">​</a></h3><p>我们从官网上下载了64位exe文件之后，即可进行安装。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041151781.png" alt="image-20240104115138722" loading="lazy"></p><p>默认会有一个简单的案例项目，我们可以点进去查看。</p><p>项目中自动生成了与宠物商店有关的数条接口。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041152411.png" alt="image-20240104115253375" loading="lazy"></p><p>对于页面的风格自己也可以进行设置， 打开设置对页面的主题颜色和字体大小可以自定义，还有一些其他的网络代理、证书代理调配等。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041153444.png" alt="image-20240104115329366" loading="lazy"></p><h3 id="_3-2-基本流程" tabindex="-1">3.2 基本流程 <a class="header-anchor" href="#_3-2-基本流程" aria-label="Permalink to &quot;3.2 基本流程&quot;">​</a></h3><p>点击新建团队，创建新项目。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041156951.png" alt="image-20240104115632915" loading="lazy"></p><p>输入自己的团队名称，点击保存。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041157499.png" alt="image-20240104115714471" loading="lazy"></p><p>进入自己保存的团队：可以新建项目、可以定向邀请成员协同操作、可以修改团队名称移交或解散团队。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041158936.gif" alt="" loading="lazy"></p><p>接下来新建项目，输入名称，项目图标自定，如果第一次使用可以允许包含示例数据，点击确认即可。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041200340.png" alt="image-20240104120002306" loading="lazy"></p><p>点击确认之后跳转到如下界面，因为上面我同意包含示例数据，所有在项目概览中的项目统计上数字不为0， 当前的项目可进行的操作很多，下图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401041320668.png" alt="image-20240104132022575" loading="lazy"></p><h3 id="_3-3-实际请求" tabindex="-1">3.3 实际请求 <a class="header-anchor" href="#_3-3-实际请求" aria-label="Permalink to &quot;3.3 实际请求&quot;">​</a></h3><p>通过实际请求可以看到具体的请求信息</p><p>我们这里启动IDEA项目，然后通过接口进行测试。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042229664.png" alt="image-20240104222913603" loading="lazy"></p><p>可以看到具体 <strong>URL</strong> 以及 <strong>Header</strong>头信息。</p><h2 id="_4-idea插件使用" tabindex="-1">4.IDEA插件使用 <a class="header-anchor" href="#_4-idea插件使用" aria-label="Permalink to &quot;4.IDEA插件使用&quot;">​</a></h2><h3 id="_4-1-安装插件" tabindex="-1">4.1 安装插件 <a class="header-anchor" href="#_4-1-安装插件" aria-label="Permalink to &quot;4.1 安装插件&quot;">​</a></h3><p>Apifox IDEA 插件（Apifox Helper） 主要用于 IDEA 项目快速生成 API 文档，并同步到 Apifox，代码零入侵。</p><ul><li>基于 javadoc（Java）、KDoc（Kotlin）、ScalaDoc（Scala） 解析 API 文档。</li><li>支持 Swagger 注解</li><li>导出 API 文档到 Apifox</li><li>导出 Markdown 格式 API 文档</li><li>在 IDEA 中直接发起 API 请求</li></ul><p>在IDEA的plugins中进行搜索：Apifox Helper</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042231387.png" alt="image-20240104223145293" loading="lazy"></p><p>我这里已经下载过了，大家直接点击install下载即可。</p><h3 id="_4-2-apifox配置" tabindex="-1">4.2 Apifox配置 <a class="header-anchor" href="#_4-2-apifox配置" aria-label="Permalink to &quot;4.2 Apifox配置&quot;">​</a></h3><p>我们打开账号设置添加API访问令牌</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042233275.png" alt="image-20240104223344238" loading="lazy"></p><p>找到对应项目中的项目ID。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042234278.png" alt="image-20240104223439138" loading="lazy"></p><h3 id="_4-3-idae配置" tabindex="-1">4.3 IDAE配置 <a class="header-anchor" href="#_4-3-idae配置" aria-label="Permalink to &quot;4.3 IDAE配置&quot;">​</a></h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042236394.png" alt="image-20240104223613339" loading="lazy"></p><p>然后在对应的controller中右击，点击 <strong>upload to Apifox</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042237051.png" alt="image-20240104223741998" loading="lazy"></p><p>看到如下控制台打印即表示成功。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042238136.png" alt="image-20240104223837109" loading="lazy"></p><p>回到Apifox，刷新即可看到我们的接口信息。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042239909.png" alt="image-20240104223957836" loading="lazy"></p><p>然后即可开始进行接口测试了。</p><h2 id="_5-集成jemter测试" tabindex="-1">5.集成Jemter测试 <a class="header-anchor" href="#_5-集成jemter测试" aria-label="Permalink to &quot;5.集成Jemter测试&quot;">​</a></h2><p>可以选择循环次数和线程数量</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042249372.png" alt="image-20240104224915318" loading="lazy"></p><p>在添加步骤中导入接口即可。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042249515.png" alt="image-20240104224955477" loading="lazy"></p><p>然后点击运行即可看到我们的运行结果。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202401042250482.png" alt="image-20240104225023440" loading="lazy"></p><h2 id="_6-总结" tabindex="-1">6.总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6.总结&quot;">​</a></h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p>',65))])}const x=e(r,[["render",g]]);export{A as __pageData,x as default};
